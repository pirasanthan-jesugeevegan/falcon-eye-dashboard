{"version":3,"file":"static/js/440.ce26d695.chunk.js","mappings":"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","sources":["api/Common.ts","api/get-test-data.ts","components/Cards/MainCard.tsx","components/Cards/Skeleton/TotalIncomeCard.tsx","components/Cards/SmallCard.tsx","components/extended/Transitions.tsx","components/Tables/E2ETestDataTable.tsx","components/Tables/UnitTestDataTable.tsx","utils/product-name-converter.ts","pages/Products.tsx","redux/thunks/product.ts","redux/selectors/index.ts"],"sourcesContent":["import axios from 'axios'\n\nexport default axios.create({\n    baseURL: process.env.NODE_ENV === 'production' ? 'https://sdsdsd-9p5b.onrender.com' : 'http://localhost:5001',\n    headers: {\n        'Content-type': 'application/json',\n    },\n})\n","import commonAxios from './Common'\n\nexport async function getE2EData(endpoint: string) {\n    try {\n        const req = await commonAxios.get(`/api/v1/e2e/${endpoint}`)\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\nexport async function getStatus() {\n    try {\n        const req = await commonAxios.get('/api/v1/e2e/status')\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\nexport async function getE2eTotalTest() {\n    try {\n        const req = await commonAxios.get('/api/v1/e2e/totalTests')\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\nexport async function getUnitData(endpoint: string) {\n    try {\n        const req = await commonAxios.get(`/api/v1/unit/${endpoint}`)\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\n","import React, { forwardRef } from 'react'\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\ninterface MainCardProps {\n    border?: boolean\n    boxShadow?: boolean\n    children?: React.ReactNode\n    content?: boolean\n    contentClass?: string\n    contentSX?: Record<string, unknown>\n    darkTitle?: boolean\n    secondary?: React.ReactNode\n    shadow?: string\n    sx?: Record<string, unknown>\n    title?: React.ReactNode\n}\n\nconst headerSX = {\n    '& .MuiCardHeader-action': { mr: 0 },\n}\n\nconst MainCard = forwardRef<HTMLDivElement, MainCardProps>(\n    (\n        {\n            border = true,\n            boxShadow,\n            children,\n            content = true,\n            contentClass = '',\n            contentSX = {},\n            darkTitle,\n            secondary,\n            shadow,\n            sx = {},\n            title,\n            ...others\n        }: MainCardProps,\n        ref\n    ) => {\n        const theme = useTheme()\n\n        return (\n            <Card\n                ref={ref}\n                {...others}\n                sx={{\n                    border: border ? '1px solid' : 'none',\n                    borderColor: theme.palette.primary.light + 25,\n                    ':hover': {\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit',\n                    },\n                    ...sx,\n                }}\n            >\n                {/* card header and action */}\n                {title && (\n                    <CardHeader\n                        sx={headerSX}\n                        title={darkTitle ? <Typography variant=\"h3\">{title}</Typography> : title}\n                        action={secondary}\n                    />\n                )}\n\n                {/* content & header divider */}\n                {title && <Divider />}\n\n                {/* card content */}\n                {content && (\n                    <CardContent sx={contentSX} className={contentClass}>\n                        {children}\n                    </CardContent>\n                )}\n                {!content && children}\n            </Card>\n        )\n    }\n)\n\nexport default MainCard\n","import { Card, List, ListItem, ListItemAvatar, ListItemText, Skeleton } from '@mui/material'\nimport React from 'react'\n\nconst TotalIncomeCard = () => (\n    <Card sx={{ p: 2 }}>\n        <List sx={{ py: 0 }}>\n            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\n                <ListItemAvatar>\n                    <Skeleton variant=\"rectangular\" width={44} height={44} />\n                </ListItemAvatar>\n                <ListItemText\n                    sx={{ py: 0 }}\n                    primary={<Skeleton variant=\"rectangular\" height={20} />}\n                    secondary={<Skeleton variant=\"text\" />}\n                />\n            </ListItem>\n        </List>\n    </Card>\n)\n\nexport default TotalIncomeCard\n","import { Avatar, Box, List, ListItem, ListItemAvatar, ListItemText, Typography } from '@mui/material'\nimport { styled, useTheme } from '@mui/material/styles'\nimport React from 'react'\nimport MainCard from './MainCard'\nimport TotalIncomeCard from './Skeleton/TotalIncomeCard'\n\ninterface SmallCardProps {\n    isLoading?: boolean\n    title?: string\n    subtitle?: string\n    result?: string | null\n    icon?: React.ReactNode\n    backgroundColor?: string\n}\n\nconst CardWrapper = styled(MainCard)<{ backgroundColor?: any }>(({ theme, backgroundColor }) => ({\n    backgroundColor: theme.palette.mode === 'light' ? backgroundColor && backgroundColor.dark : theme.palette.dark.dark,\n    color: backgroundColor && backgroundColor.light,\n    overflow: 'hidden',\n    position: 'relative',\n    '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: `linear-gradient(210.04deg, ${\n            backgroundColor ? backgroundColor[200] : theme.palette.warning.dark\n        } -50.94%, rgba(144, 202, 249, 0) 83.49%)`,\n        borderRadius: '50%',\n        top: -30,\n        right: -180,\n    },\n    '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: `linear-gradient(140.9deg, ${\n            backgroundColor ? backgroundColor[200] : theme.palette.warning.dark\n        } -14.02%, rgba(144, 202, 249, 0) 77.58%)`,\n        borderRadius: '50%',\n        top: -160,\n        right: -130,\n    },\n}))\n\nconst SmallCard: React.FC<SmallCardProps> = ({ isLoading, title, subtitle, result, icon, backgroundColor }) => {\n    const theme = useTheme()\n    const resultColor = (backgroundColor: string | undefined, result: string | undefined) => {\n        if (result === 'OK') {\n            return theme.palette.success.main\n        } else if (result === 'ERROR') {\n            return theme.palette.orange.dark\n        } else if (backgroundColor) {\n            return '#fff'\n        } else {\n            return 'black'\n        }\n    }\n    const backgroundColorPicker = (backgroundColor: any, theme: any) => {\n        if (backgroundColor === 'primary') {\n            return theme.palette.primary\n        } else if (backgroundColor === 'secondary') {\n            return theme.palette.secondary\n        } else {\n            undefined\n        }\n    }\n    return (\n        <>\n            {isLoading || !title || !result ? (\n                <TotalIncomeCard />\n            ) : (\n                <CardWrapper\n                    border={false}\n                    content={false}\n                    backgroundColor={backgroundColorPicker(backgroundColor, theme)}\n                    sx={{ boxShadow: theme.shadows[10] }}\n                >\n                    <Box sx={{ p: 2 }}>\n                        <List sx={{ py: 0 }}>\n                            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\n                                <ListItemAvatar>\n                                    <Avatar\n                                        variant=\"rounded\"\n                                        sx={{\n                                            ...theme.typography.commonAvatar,\n                                            ...theme.typography.largeAvatar,\n                                            backgroundColor:\n                                                theme.palette.mode === 'light'\n                                                    ? backgroundColor\n                                                        ? backgroundColorPicker(backgroundColor, theme)[800]\n                                                        : theme.palette.warning.light\n                                                    : theme.palette.dark.main,\n                                            color: backgroundColor ? '#fff' : theme.palette.warning.dark,\n                                        }}\n                                    >\n                                        {icon}\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    sx={{\n                                        py: 0,\n                                        mt: 0.45,\n                                        mb: 0.45,\n                                    }}\n                                    primary={\n                                        <Typography\n                                            variant=\"h4\"\n                                            sx={{\n                                                color: backgroundColor && '#fff',\n                                            }}\n                                        >\n                                            {title}\n                                        </Typography>\n                                    }\n                                    secondary={\n                                        <Typography\n                                            variant=\"subtitle2\"\n                                            sx={{\n                                                color: backgroundColor ? 'primary.light' : theme.palette.grey[500],\n                                                mt: 0.25,\n                                            }}\n                                        >\n                                            {subtitle}\n                                        </Typography>\n                                    }\n                                />\n                                <Typography\n                                    variant=\"h2\"\n                                    sx={{\n                                        color: resultColor(backgroundColor, result),\n                                    }}\n                                >\n                                    {result}\n                                </Typography>\n                            </ListItem>\n                        </List>\n                    </Box>\n                </CardWrapper>\n            )}\n        </>\n    )\n}\n\nexport default SmallCard\n","import React, { forwardRef } from 'react'\nimport { Box, Collapse, Fade, Grow, Slide, Zoom } from '@mui/material'\n\ninterface TransitionsProps {\n    children?: React.ReactNode\n    type?: 'grow' | 'fade' | 'collapse' | 'slide' | 'zoom'\n    position?: 'top-left' | 'top-right' | 'top' | 'bottom-left' | 'bottom-right' | 'bottom'\n    direction?: 'up' | 'down' | 'left' | 'right'\n    in?: boolean\n}\n\nconst Transitions = forwardRef<HTMLDivElement, TransitionsProps>(\n    ({ children, position = 'top-left', direction = 'up', type = 'grow', ...others }, ref) => {\n        let positionSX: React.CSSProperties = {\n            transformOrigin: '0 0 0',\n        }\n\n        switch (position) {\n            case 'top-right':\n                positionSX = {\n                    transformOrigin: 'top right',\n                }\n                break\n            case 'top':\n                positionSX = {\n                    transformOrigin: 'top',\n                }\n                break\n            case 'bottom-left':\n                positionSX = {\n                    transformOrigin: 'bottom left',\n                }\n                break\n            case 'bottom-right':\n                positionSX = {\n                    transformOrigin: 'bottom right',\n                }\n                break\n            case 'bottom':\n                positionSX = {\n                    transformOrigin: 'bottom',\n                }\n                break\n            case 'top-left':\n            default:\n                positionSX = {\n                    transformOrigin: '0 0 0',\n                }\n                break\n        }\n\n        return (\n            <Box ref={ref}>\n                {type === 'grow' && (\n                    <Grow {...others}>\n                        <Box sx={positionSX}>{children}</Box>\n                    </Grow>\n                )}\n                {type === 'collapse' && (\n                    <Collapse {...others} sx={positionSX}>\n                        {children}\n                    </Collapse>\n                )}\n                {type === 'fade' && (\n                    <Fade\n                        {...others}\n                        timeout={{\n                            appear: 500,\n                            enter: 600,\n                            exit: 400,\n                        }}\n                    >\n                        <Box sx={positionSX}>{children}</Box>\n                    </Fade>\n                )}\n                {type === 'slide' && (\n                    <Slide\n                        {...others}\n                        timeout={{\n                            appear: 0,\n                            enter: 400,\n                            exit: 200,\n                        }}\n                        direction={direction}\n                    >\n                        <Box sx={positionSX}>{children}</Box>\n                    </Slide>\n                )}\n                {type === 'zoom' && (\n                    <Zoom {...others}>\n                        <Box sx={positionSX}>{children}</Box>\n                    </Zoom>\n                )}\n            </Box>\n        )\n    }\n)\n\nexport default Transitions\n","import React, { useState } from 'react'\nimport Box from '@mui/material/Box'\nimport Modal from '@mui/material/Modal'\nimport Paper from '@mui/material/Paper'\nimport { useTheme } from '@mui/material/styles'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TablePagination from '@mui/material/TablePagination'\nimport TableRow from '@mui/material/TableRow'\nimport Typography from '@mui/material/Typography'\nimport moment from 'moment'\n\nimport Transitions from '../extended/Transitions'\nimport MainCard from 'components/Cards/MainCard'\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '80%',\n    height: 'auto',\n    overflowY: 'auto',\n    bgcolor: 'background.paper',\n    borderRadius: '8px',\n    boxShadow: 24,\n    p: 4,\n}\nconst E2ETestDataTable = ({ isLoading, data }: { isLoading: boolean; data: TestData[] }) => {\n    const [selectedRowData, setSelectedRowData] = useState<TestData | null>(null)\n    const [isModalOpen, setIsModalOpen] = useState<boolean>(false)\n    const [page, setPage] = useState<number>(0)\n    const [rowsPerPage, setRowsPerPage] = useState<number>(10)\n    const theme = useTheme()\n\n    const handleRowClick = (rowData: TestData) => {\n        setSelectedRowData(rowData)\n        setIsModalOpen(true)\n    }\n\n    const handleModalClose = () => {\n        setIsModalOpen(false)\n    }\n\n    const handleChangePage = (event: any, newPage: number) => {\n        setPage(newPage)\n    }\n\n    const handleChangeRowsPerPage = (event: any) => {\n        setRowsPerPage(parseInt(event.target.value, 10))\n        setPage(0)\n    }\n\n    return (\n        <>\n            {!isLoading && data.length > 0 ? (\n                <>\n                    <TableContainer\n                        component={Paper}\n                        sx={{\n                            backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.dark : theme.palette.background.paper,\n                            borderRadius: '5px',\n                            boxShadow: theme.shadows[5],\n                        }}\n                    >\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Date</TableCell>\n                                    <TableCell>Pass</TableCell>\n                                    <TableCell>Fail</TableCell>\n                                    <TableCell>Skip</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((d: any) => (\n                                    <TableRow key={d.id} onClick={() => handleRowClick(d)} hover style={{ cursor: 'pointer' }}>\n                                        <TableCell>{moment(d.date).format('DD/MM/YY')}</TableCell>\n                                        <TableCell>{d.pass}</TableCell>\n                                        <TableCell>{d.fail}</TableCell>\n                                        <TableCell>{d.skip}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        component=\"div\"\n                        count={data.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                    <Transitions in={isModalOpen}>\n                        <Modal\n                            open={isModalOpen}\n                            onClose={handleModalClose}\n                            aria-labelledby=\"modal-modal-title\"\n                            aria-describedby=\"modal-modal-description\"\n                        >\n                            <Box sx={style}>\n                                <Typography id=\"modal-modal-title\" variant=\"h3\" component=\"h2\">\n                                    {selectedRowData?.title} Test Run at {moment(selectedRowData?.date).format('DD/MM/YY')}\n                                </Typography>\n                                <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n                                    <iframe src={selectedRowData?.report_url} title=\"Modal Iframe\" width=\"100%\" height=\"600px\"></iframe>\n                                </Typography>\n                            </Box>\n                        </Modal>\n                    </Transitions>\n                </>\n            ) : (\n                <MainCard\n                    sx={{\n                        backgroundColor: theme.palette.mode === 'dark' && theme.palette.dark.dark,\n                        borderRadius: '5px',\n                        boxShadow: theme.shadows[5],\n                    }}\n                >\n                    <Typography sx={{ textAlign: 'center' }}>No Data</Typography>\n                </MainCard>\n            )}\n        </>\n    )\n}\n\nexport default E2ETestDataTable\n","import React, { useState } from 'react'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\nimport MinimizeIcon from '@mui/icons-material/Minimize'\nimport NorthEastIcon from '@mui/icons-material/NorthEast'\nimport SouthEastIcon from '@mui/icons-material/SouthEast'\nimport {\n    Avatar,\n    Box,\n    Chip,\n    Collapse,\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    Tooltip,\n    Typography,\n} from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport moment from 'moment'\nimport MainCard from 'components/Cards/MainCard'\n\nfunction Row({ row }: { row: UnitTestData }) {\n    const [open, setOpen] = useState<boolean>(false)\n\n    const lastResult = row.result[row.result.length - 1]\n    const fillColour = (value: string) => {\n        const numericValue = parseFloat(value)\n        if (numericValue >= 90 && numericValue <= 100) {\n            return 'success'\n        } else if (numericValue >= 80 && numericValue < 90) {\n            return 'warning'\n        } else {\n            return 'error'\n        }\n    }\n    function getStatusChange(testData: UnitTestData) {\n        if (!testData.result || testData.result.length < 2) {\n            return <MinimizeIcon />\n        }\n\n        const lastResult = testData.result[testData.result.length - 1]\n        const secondLastResult = testData.result[testData.result.length - 2]\n\n        if (!lastResult || !secondLastResult) {\n            return 'Result data missing'\n        }\n\n        const lastPercentage = parseFloat(lastResult.percentage)\n        const secondLastPercentage = parseFloat(secondLastResult.percentage)\n\n        if (isNaN(lastPercentage) || isNaN(secondLastPercentage)) {\n            return <MinimizeIcon />\n        }\n\n        if (lastPercentage > secondLastPercentage) {\n            return <NorthEastIcon />\n        } else if (lastPercentage < secondLastPercentage) {\n            return <SouthEastIcon />\n        } else {\n            return <MinimizeIcon />\n        }\n    }\n    const handleRowClick = (selected: string) => {\n        window.open(`https://github.com/coincover/coincover-b2b2c/pull/${selected}`, '_blank')\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell>\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {moment(lastResult.date).format('DD/MM/YYYY h:mm:ss')}\n                </TableCell>\n                <TableCell\n                    align=\"right\"\n                    onClick={() => handleRowClick(row.pull_request)}\n                    style={{ cursor: 'pointer', textDecoration: 'underline' }}\n                >\n                    {row.pull_request}\n                </TableCell>\n                <TableCell>\n                    <Tooltip title={lastResult.author || 'Not assigned'}>\n                        <Avatar\n                            alt={lastResult.author}\n                            src={`https://ui-avatars.com/api/?name=${lastResult.author}&background=random&?bold=true`}\n                        />\n                    </Tooltip>\n                </TableCell>\n                <TableCell>{lastResult.commit}</TableCell>\n                <TableCell align=\"right\">\n                    <Chip\n                        label={`${lastResult.percentage}%`}\n                        color={fillColour(lastResult.percentage)}\n                        sx={{ borderRadius: '5px', width: '100%' }}\n                    />\n                    {getStatusChange(row)}\n                </TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box sx={{ margin: 1 }}>\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                History\n                            </Typography>\n                            <Table size=\"small\" aria-label=\"purchases\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Date</TableCell>\n                                        <TableCell>Author</TableCell>\n                                        <TableCell align=\"right\">Commit</TableCell>\n                                        <TableCell align=\"right\">Function Coverage</TableCell>\n                                        <TableCell align=\"right\">Line Coverage</TableCell>\n                                        <TableCell align=\"right\">Statement Coverage</TableCell>\n                                        <TableCell align=\"right\">Overall Coverage</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {row.result.map((historyRow: UnitTestResult) => (\n                                        <TableRow\n                                            key={historyRow?.date}\n                                            onClick={() => handleRowClick(row?.pull_request)}\n                                            hover={true}\n                                            style={{\n                                                cursor: 'pointer',\n                                            }}\n                                        >\n                                            <TableCell component=\"th\" scope=\"row\">\n                                                {moment(historyRow?.date).format('DD/MM/YYYY h:mm:ss')}\n                                            </TableCell>\n                                            <TableCell>{historyRow?.author}</TableCell>\n                                            <TableCell align=\"right\">{historyRow?.commit}</TableCell>\n                                            <TableCell align=\"right\">\n                                                <Chip\n                                                    label={`${historyRow?.function_coverage}%`}\n                                                    color={fillColour(historyRow?.function_coverage)}\n                                                    variant=\"filled\"\n                                                    sx={{\n                                                        borderRadius: '5px',\n                                                        width: '100%',\n                                                    }}\n                                                />\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Chip\n                                                    label={`${historyRow?.line_coverage}%`}\n                                                    color={fillColour(historyRow?.line_coverage)}\n                                                    variant=\"filled\"\n                                                    sx={{\n                                                        borderRadius: '5px',\n                                                        width: '100%',\n                                                    }}\n                                                />\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Chip\n                                                    label={`${historyRow?.statement_coverage}%`}\n                                                    color={fillColour(historyRow?.statement_coverage)}\n                                                    variant=\"filled\"\n                                                    sx={{\n                                                        borderRadius: '5px',\n                                                        width: '100%',\n                                                    }}\n                                                />\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Chip\n                                                    label={`${historyRow?.percentage}%`}\n                                                    color={fillColour(historyRow?.percentage)}\n                                                    variant=\"filled\"\n                                                    sx={{\n                                                        borderRadius: '5px',\n                                                        width: '100%',\n                                                    }}\n                                                />\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    )\n}\n\nconst UnitTestDataTable = ({ isLoading, data }: { isLoading: boolean; data: UnitTestData[] }) => {\n    const theme = useTheme()\n\n    const [page, setPage] = useState<number>(0)\n    const [rowsPerPage, setRowsPerPage] = useState<number>(10)\n\n    const handleChangePage = (event: any, newPage: number) => {\n        setPage(newPage)\n    }\n\n    const handleChangeRowsPerPage = (event: any) => {\n        setRowsPerPage(parseInt(event.target.value, 10))\n        setPage(0)\n    }\n    return (\n        <>\n            {!isLoading && data.length > 0 ? (\n                <TableContainer\n                    component={Paper}\n                    sx={{\n                        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.dark : theme.palette.background.paper,\n                        borderRadius: '5px',\n                        boxShadow: theme.shadows[5],\n                    }}\n                >\n                    <Table aria-label=\"collapsible table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell />\n                                <TableCell>Date</TableCell>\n                                <TableCell align=\"right\">Pull Request</TableCell>\n                                <TableCell>Author</TableCell>\n                                <TableCell>Commit</TableCell>\n                                <TableCell align=\"right\">Overall Coverage</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row: UnitTestData) => (\n                                <Row key={row.id} row={row} />\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <TablePagination\n                        component=\"div\"\n                        count={data.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                </TableContainer>\n            ) : (\n                <MainCard\n                    sx={{\n                        backgroundColor: theme.palette.mode === 'dark' && theme.palette.dark.dark,\n                        borderRadius: '5px',\n                        boxShadow: theme.shadows[5],\n                    }}\n                >\n                    <Typography sx={{ textAlign: 'center' }}>No Data</Typography>\n                </MainCard>\n            )}\n        </>\n    )\n}\n\nexport default UnitTestDataTable\n","import { servicesAndProducts } from 'shared/src/service-and-product-list'\n\nexport function getSlugByName(name: string) {\n    const product = servicesAndProducts.find((p: ServiceAndProducts) => p.name === name)\n\n    return product ? product.slug : name\n}\nexport function getApiByName(name: string) {\n    const product = servicesAndProducts.find((p: ServiceAndProducts) => p.name === name)\n\n    return product ? product.api : name\n}\n","import React, { useEffect, useState } from 'react'\nimport FingerprintIcon from '@mui/icons-material/Fingerprint'\nimport { Box, Grid, Tab, Tabs } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport MainCard from 'components/Cards/MainCard'\nimport SmallCard from '../components/Cards/SmallCard'\nimport E2ETestDataTable from '../components/Tables/E2ETestDataTable'\nimport UnitTestDataTable from '../components/Tables/UnitTestDataTable'\nimport { gridSpacing } from '../redux/constants'\nimport { getProductE2EData, getProductUnitData } from '../redux/selectors'\nimport { retrieveE2EData, retrieveUnitData } from '../redux/thunks/product'\nimport { getApiByName } from '../utils/product-name-converter'\n\nconst Products = ({ title }: { title: string }) => {\n    const dispatch = useDispatch()\n    const theme = useTheme()\n\n    const unitData = useSelector(getProductUnitData(getApiByName(title)))\n    const e2eData = useSelector(getProductE2EData(getApiByName(title)))\n\n    const [isLoading, setLoading] = useState<boolean>(true)\n    const [value, setValue] = useState<number>(0)\n    const [data, setData] = useState<TestData[]>([])\n    const [isUnitDataFetched, setUnitDataFetched] = useState<string>('')\n    const [isE2EDataFetched, setE2EDataFetched] = useState<string>('')\n\n    const getTestPercentage = (pass: number, fail: number, skip: number) => {\n        const totalTests = pass + fail + skip\n        const passPercentage = (((pass + skip) / totalTests) * 100).toFixed(0)\n        const overallResult = isNaN(Number(passPercentage)) ? 'No Data' : `${passPercentage}%`\n        return overallResult\n    }\n\n    const lastItem = data[data.length - 1]\n    const percentageData = getTestPercentage(lastItem?.pass, lastItem?.fail, lastItem?.skip)\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue)\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                setLoading(true)\n\n                if (isUnitDataFetched !== getApiByName(title)) {\n                    // @ts-ignore\n                    await dispatch(retrieveUnitData(getApiByName(title)))\n                    setUnitDataFetched(getApiByName(title))\n                }\n                if (isE2EDataFetched !== getApiByName(title)) {\n                    // @ts-ignore\n                    await dispatch(retrieveE2EData(getApiByName(title)))\n                    setE2EDataFetched(getApiByName(title))\n                }\n                setLoading(false)\n            } catch (error) {\n                console.error('Error fetching data:', error)\n            } finally {\n                setLoading(false)\n            }\n        }\n\n        fetchData()\n    }, [dispatch, title, e2eData, isE2EDataFetched, isUnitDataFetched, unitData, value])\n\n    useEffect(() => {\n        const modifiedData = e2eData.data.map((item: TestData) => ({\n            ...item,\n            title,\n        }))\n\n        modifiedData.sort((a: TestData, b: TestData) => {\n            // Convert date strings to Date objects for comparison\n            const dateA = new Date(a.date)\n            const dateB = new Date(b.date)\n\n            // Compare the dates\n            return dateB.getTime() - dateA.getTime()\n        })\n\n        setData(modifiedData)\n    }, [e2eData, title, value])\n\n    return (\n        <MainCard title={`${value === 0 ? 'Unit' : 'E2E'} Test Result: ${title}`} sx={{ boxShadow: theme.shadows[6] }}>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item sm={6} xs={12} md={6} lg={4}>\n                            <SmallCard\n                                isLoading={isLoading}\n                                title=\"Latest E2E Run\"\n                                result={percentageData}\n                                icon={<FingerprintIcon fontSize=\"inherit\" />}\n                                backgroundColor=\"primary\"\n                            />\n                        </Grid>\n                        <Grid item sm={6} xs={12} md={6} lg={4}>\n                            <SmallCard\n                                isLoading={isLoading}\n                                title=\"Latest Unit Run\"\n                                result={unitData.data[0]?.result[0]?.percentage ? `${unitData.data[0]?.result[0]?.percentage}%` : 'No Data'}\n                                icon={<FingerprintIcon fontSize=\"inherit\" />}\n                                backgroundColor=\"secondary\"\n                            />\n                        </Grid>\n                        {/* <Grid item sm={6} xs={12} md={6} lg={4}>\n              <SmallCard\n                isLoading={isLoading}\n                title=\"Latest E2E Test Coverage Report\"\n                result=\"No Data\"\n                icon={<FingerprintIcon fontSize=\"inherit\" />}\n              />\n            </Grid> */}\n                        <Grid item xs={12}>\n                            <>\n                                <Box\n                                    sx={{\n                                        width: '100%',\n                                        bgcolor: 'background.paper',\n                                    }}\n                                >\n                                    <Tabs value={value} onChange={handleChange} aria-label=\"disabled tabs example\">\n                                        <Tab label=\"Unit Test\" />\n                                        <Tab label=\"E2E Test\" />\n                                    </Tabs>\n                                </Box>\n                                <TabPanel value={value} index={0}>\n                                    {isLoading ? <div>Loading...</div> : <UnitTestDataTable data={unitData.data} isLoading={isLoading} />}\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    {isLoading ? <div>Loading...</div> : <E2ETestDataTable data={e2eData.data} isLoading={isLoading} />}\n                                </TabPanel>\n                            </>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MainCard>\n    )\n}\n\nexport default Products\n\ninterface TabPanelProps {\n    children: React.ReactNode\n    index: number\n    value: number\n}\n// TabPanel component\nconst TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => {\n    return (\n        <div role=\"tabpanel\" hidden={value !== index}>\n            {value === index && <Box>{children}</Box>}\n        </div>\n    )\n}\n","/* eslint-disable no-unused-vars */\nimport { Dispatch } from 'redux'\nimport { getE2EData, getUnitData } from '../../api/get-test-data'\n\nimport { GET_E2E, GET_UNIT } from '../actions'\n\nexport const retrieveUnitData = (issueType: string) => async (dispatch: Dispatch, getState: any) => {\n    const unitData = getState().unitReducer[issueType]\n    const currentTime = Date.now()\n\n    if (!unitData || unitData.length === 0 || currentTime - unitData.lastUpdated > 600000) {\n        try {\n            const res = await getUnitData(issueType)\n            dispatch({\n                type: GET_UNIT,\n                payload: {\n                    issueType,\n                    data: res,\n                    lastUpdated: currentTime,\n                },\n            })\n            return res\n        } catch (err) {\n            console.error('Error retrieving data:', err)\n            throw err\n        }\n    }\n\n    return unitData\n}\n\nexport const retrieveE2EData = (issueType: string) => async (dispatch: Dispatch, getState: any) => {\n    const e2eData = getState().e2eReducer[issueType]\n    const currentTime = Date.now()\n\n    if (!e2eData.data || e2eData.data.length === 0 || currentTime - e2eData.lastUpdated > 600000) {\n        try {\n            const res = await getE2EData(issueType)\n            dispatch({\n                type: GET_E2E,\n                payload: {\n                    issueType,\n                    data: res,\n                    lastUpdated: currentTime,\n                },\n            })\n            return res\n        } catch (err) {\n            console.error('Error retrieving data:', err)\n            throw err\n        }\n    }\n\n    return e2eData\n}\n","import { createSelector } from 'reselect'\n\nconst jiraReducerSelector = (state: { jiraReducer: any }) => state.jiraReducer\nconst unitReducerSelector = (state: { unitReducer: any }) => state.unitReducer\nconst e2eReducerSelector = (state: { e2eReducer: any }) => state.e2eReducer\n\nexport const getJiraBugData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.bugData)\nexport const getJiraDefectData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.defectData)\nexport const getJiraSecurityData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.securityData)\n\nexport const getProductUnitData = (issueType: string) => createSelector([unitReducerSelector], (unitReducer) => unitReducer[issueType])\nexport const getProductE2EData = (issueType: string) => createSelector([e2eReducerSelector], (e2eReducer) => e2eReducer[issueType])\n"],"names":["axios","create","baseURL","headers","async","getE2EData","endpoint","commonAxios","get","concat","data","error","getStatus","getE2eTotalTest","getUnitData","headerSX","mr","forwardRef","_ref","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","_jsxs","Card","borderColor","palette","primary","light","_jsx","CardHeader","Typography","variant","action","Divider","CardContent","className","TotalIncomeCard","p","List","py","ListItem","alignItems","disableGutters","ListItemAvatar","Skeleton","width","height","ListItemText","CardWrapper","styled","MainCard","backgroundColor","mode","dark","color","overflow","position","background","warning","borderRadius","top","right","_ref2","isLoading","subtitle","result","icon","backgroundColorPicker","_Fragment","shadows","Box","Avatar","typography","commonAvatar","largeAvatar","main","mt","mb","grey","resultColor","success","orange","direction","type","positionSX","transformOrigin","Grow","Collapse","Fade","timeout","appear","enter","exit","Slide","Zoom","style","left","transform","overflowY","bgcolor","selectedRowData","setSelectedRowData","useState","isModalOpen","setIsModalOpen","page","setPage","rowsPerPage","setRowsPerPage","length","TableContainer","component","Paper","paper","Table","TableHead","TableRow","TableCell","TableBody","slice","map","d","onClick","hover","cursor","moment","date","format","pass","fail","skip","id","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value","Transitions","in","Modal","open","onClose","handleModalClose","src","report_url","textAlign","Row","row","setOpen","lastResult","fillColour","numericValue","parseFloat","handleRowClick","selected","window","React","borderBottom","IconButton","size","KeyboardArrowUpIcon","KeyboardArrowDownIcon","scope","align","pull_request","textDecoration","Tooltip","author","alt","commit","Chip","label","percentage","testData","MinimizeIcon","secondLastResult","lastPercentage","secondLastPercentage","isNaN","NorthEastIcon","SouthEastIcon","getStatusChange","paddingBottom","paddingTop","colSpan","unmountOnExit","margin","gutterBottom","historyRow","function_coverage","line_coverage","statement_coverage","getApiByName","name","product","servicesAndProducts","find","api","_unitData$data$","_unitData$data$$resul","_unitData$data$2","_unitData$data$2$resu","dispatch","useDispatch","unitData","useSelector","getProductUnitData","e2eData","getProductE2EData","setLoading","setValue","setData","isUnitDataFetched","setUnitDataFetched","isE2EDataFetched","setE2EDataFetched","lastItem","percentageData","getTestPercentage","passPercentage","toFixed","Number","useEffect","issueType","getState","unitReducer","currentTime","Date","now","lastUpdated","res","GET_UNIT","payload","err","console","e2eReducer","GET_E2E","retrieveE2EData","fetchData","modifiedData","item","sort","a","b","dateA","getTime","Grid","container","spacing","gridSpacing","xs","sm","md","lg","SmallCard","FingerprintIcon","fontSize","Tabs","onChange","handleChange","newValue","Tab","TabPanel","index","UnitTestDataTable","E2ETestDataTable","role","hidden","jiraReducerSelector","state","jiraReducer","unitReducerSelector","e2eReducerSelector","getJiraBugData","createSelector","bugData","getJiraDefectData","defectData","getJiraSecurityData","securityData"],"sourceRoot":""}