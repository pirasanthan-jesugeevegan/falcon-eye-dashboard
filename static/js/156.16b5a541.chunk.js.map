{"version":3,"file":"static/js/156.16b5a541.chunk.js","mappings":"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","sources":["api/Common.ts","components/Cards/MainCard.tsx","components/Tables/JiraTable.tsx","pages/Jira.tsx","redux/selectors/index.ts","redux/thunks/jira.ts","api/get-jira-data.ts"],"sourcesContent":["import axios from 'axios'\n\nexport default axios.create({\n    baseURL: process.env.NODE_ENV === 'production' ? 'https://sdsdsd-9p5b.onrender.com' : 'http://localhost:5001',\n    headers: {\n        'Content-type': 'application/json',\n    },\n})\n","import React, { forwardRef } from 'react'\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\ninterface MainCardProps {\n    border?: boolean\n    boxShadow?: boolean\n    children?: React.ReactNode\n    content?: boolean\n    contentClass?: string\n    contentSX?: Record<string, unknown>\n    darkTitle?: boolean\n    secondary?: React.ReactNode\n    shadow?: string\n    sx?: Record<string, unknown>\n    title?: React.ReactNode\n}\n\nconst headerSX = {\n    '& .MuiCardHeader-action': { mr: 0 },\n}\n\nconst MainCard = forwardRef<HTMLDivElement, MainCardProps>(\n    (\n        {\n            border = true,\n            boxShadow,\n            children,\n            content = true,\n            contentClass = '',\n            contentSX = {},\n            darkTitle,\n            secondary,\n            shadow,\n            sx = {},\n            title,\n            ...others\n        }: MainCardProps,\n        ref\n    ) => {\n        const theme = useTheme()\n\n        return (\n            <Card\n                ref={ref}\n                {...others}\n                sx={{\n                    border: border ? '1px solid' : 'none',\n                    borderColor: theme.palette.primary.light + 25,\n                    ':hover': {\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit',\n                    },\n                    ...sx,\n                }}\n            >\n                {/* card header and action */}\n                {title && (\n                    <CardHeader\n                        sx={headerSX}\n                        title={darkTitle ? <Typography variant=\"h3\">{title}</Typography> : title}\n                        action={secondary}\n                    />\n                )}\n\n                {/* content & header divider */}\n                {title && <Divider />}\n\n                {/* card content */}\n                {content && (\n                    <CardContent sx={contentSX} className={contentClass}>\n                        {children}\n                    </CardContent>\n                )}\n                {!content && children}\n            </Card>\n        )\n    }\n)\n\nexport default MainCard\n","import React from 'react'\nimport { Avatar, Chip, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip, Typography } from '@mui/material'\nimport Paper from '@mui/material/Paper'\nimport moment from 'moment'\n\nconst JiraTable = ({ data }: { data: Issue[] }) => {\n    const handleRowClick = (rowData: Issue) => {\n        window.open(`https://coincover.atlassian.net/browse/${rowData.key}`, '_blank')\n    }\n\n    return (\n        <div>\n            <TableContainer component={Paper}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Jira Number</TableCell>\n                            <TableCell>Summary</TableCell>\n                            <TableCell>Status</TableCell>\n                            <TableCell>Assignee</TableCell>\n                            <TableCell>Created</TableCell>\n                            <TableCell>Last Updated</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {data?.map((d: Issue) => (\n                            <TableRow\n                                key={d.id}\n                                onClick={() => handleRowClick(d)}\n                                hover // Add hover property for hover effect\n                                style={{ cursor: 'pointer' }} // Change cursor on hover\n                            >\n                                <TableCell>\n                                    <Typography\n                                        sx={{\n                                            fontWeight: 500,\n                                            mr: 1,\n                                            mt: 1.75,\n                                            mb: 0.75,\n                                        }}\n                                    >\n                                        {d.key}\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>{d.fields.summary}</TableCell>\n                                <TableCell>\n                                    <Chip\n                                        variant=\"filled\"\n                                        color=\"secondary\"\n                                        label={d.fields.status.name}\n                                        sx={{\n                                            borderRadius: '5px',\n                                            width: '100%',\n                                        }}\n                                        size=\"medium\"\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    <Tooltip title={d.fields?.assignee?.displayName || 'Not assigned'}>\n                                        <Avatar alt={d.fields?.assignee?.displayName} src={d.fields?.assignee?.avatarUrls['48x48']} />\n                                    </Tooltip>\n                                </TableCell>\n                                <TableCell>\n                                    <Tooltip title={moment(d.fields.created).format('MMMM Do YYYY, h:mm:ss a')}>\n                                        <span>{moment(d.fields.created).startOf('hour').fromNow()}</span>\n                                    </Tooltip>\n                                </TableCell>\n                                <TableCell>\n                                    <Tooltip title={moment(d.fields.updated).format('MMMM Do YYYY, h:mm:ss a')}>\n                                        <span>{moment(d.fields.updated).startOf('hour').fromNow()}</span>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    )\n}\n\nexport default JiraTable\n","import React, { useEffect, useState } from 'react'\nimport { Grid, Typography } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport MainCard from '../components/Cards/MainCard'\nimport JiraTable from '../components/Tables/JiraTable'\nimport { gridSpacing } from '../redux/constants'\nimport { getJiraBugData, getJiraDefectData, getJiraSecurityData } from '../redux/selectors'\nimport { retrieveJiraData } from '../redux/thunks/jira'\n\nconst Products = ({ title }: { title: string }) => {\n    const jiraBugData = useSelector(getJiraBugData)\n    const jiraDefectData = useSelector(getJiraDefectData)\n    const jiraSecurityData = useSelector(getJiraSecurityData)\n\n    const [bug, setBug] = useState<IssueResponse>(jiraBugData)\n    const [defect, setDefect] = useState<IssueResponse>(jiraDefectData)\n    const [security, setSecurity] = useState<IssueResponse>(jiraSecurityData)\n    const [isLoading, setLoading] = useState<boolean>(true)\n    const [data, setData] = useState<any>([])\n\n    const dispatch = useDispatch()\n    const theme = useTheme()\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                setLoading(true)\n\n                if (!jiraBugData || jiraBugData.length === 0) {\n                    // @ts-ignore\n                    setBug(await dispatch(retrieveJiraData('bug')))\n                }\n                if (!jiraDefectData || jiraDefectData.length === 0) {\n                    setDefect(\n                        // @ts-ignore\n                        await dispatch(retrieveJiraData('customer defect'))\n                    )\n                }\n\n                if (!jiraSecurityData || jiraSecurityData.length === 0) {\n                    setSecurity(\n                        // @ts-ignore\n                        await dispatch(retrieveJiraData('security issue'))\n                    )\n                }\n            } catch (error) {\n                console.error('Error fetching data:', error)\n            } finally {\n                setLoading(false)\n            }\n        }\n\n        fetchData()\n    }, [dispatch, jiraBugData, jiraDefectData, jiraSecurityData])\n\n    useEffect(() => {\n        if (title === 'Bugs') setData(bug || [])\n        if (title === 'Defects') setData(defect || [])\n        if (title === 'Securitys') setData(security || [])\n    }, [bug, defect, security, title])\n\n    return (\n        <>\n            {data?.issues?.length > 0 ? (\n                <MainCard title={`List of Open ${title} issues`} sx={{ boxShadow: theme.shadows[6] }}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12}>\n                            <Grid container spacing={gridSpacing}>\n                                <Grid item xs={12} sm={12} md={12} lg={12}>\n                                    {isLoading ? <div>Loading...</div> : <JiraTable data={data.issues} />}\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </MainCard>\n            ) : (\n                <MainCard sx={{ boxShadow: theme.shadows[6] }}>\n                    <Typography sx={{ textAlign: 'center' }}>No Data</Typography>\n                </MainCard>\n            )}\n        </>\n    )\n}\n\nexport default Products\n","import { createSelector } from 'reselect'\n\nconst jiraReducerSelector = (state: { jiraReducer: any }) => state.jiraReducer\nconst unitReducerSelector = (state: { unitReducer: any }) => state.unitReducer\nconst e2eReducerSelector = (state: { e2eReducer: any }) => state.e2eReducer\n\nexport const getJiraBugData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.bugData)\nexport const getJiraDefectData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.defectData)\nexport const getJiraSecurityData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.securityData)\n\nexport const getProductUnitData = (issueType: string) => createSelector([unitReducerSelector], (unitReducer) => unitReducer[issueType])\nexport const getProductE2EData = (issueType: string) => createSelector([e2eReducerSelector], (e2eReducer) => e2eReducer[issueType])\n","/* eslint-disable no-unused-vars */\nimport { Dispatch } from 'redux'\nimport { getJira } from '../../api/get-jira-data'\n\nimport { GET_JIRA } from '../actions'\n\nexport const retrieveJiraData = (issueType: string) => async (dispatch: Dispatch, getState: any) => {\n    const jiraData = getState().jiraReducer[issueType]\n\n    if (!jiraData || jiraData.length === 0) {\n        try {\n            const res = await getJira(issueType)\n            dispatch({\n                type: GET_JIRA,\n                payload: {\n                    issueType,\n                    data: res,\n                },\n            })\n            return res\n        } catch (err) {\n            console.error('Error retrieving Jira data:', err)\n            throw err\n        }\n    }\n\n    return jiraData\n}\n","import commonAxios from './Common'\n\nexport async function getJira(issueType: string) {\n    try {\n        const req = await commonAxios.get(`/rest/api/2/search?jql=project=PRODENG AND type=\"${issueType}\" AND status not in (\"Done\")`)\n        return req.data\n    } catch (error) {\n        console.error('Error fetching Jira data:', error)\n        throw error\n    }\n}\n"],"names":["axios","create","baseURL","headers","headerSX","mr","forwardRef","_ref","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","_jsxs","Card","borderColor","palette","primary","light","_jsx","CardHeader","Typography","variant","action","Divider","CardContent","className","data","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","d","_d$fields","_d$fields$assignee","_d$fields2","_d$fields2$assignee","_d$fields3","_d$fields3$assignee","onClick","handleRowClick","rowData","window","open","concat","key","hover","style","cursor","fontWeight","mt","mb","fields","summary","Chip","color","label","status","name","borderRadius","width","size","Tooltip","assignee","displayName","Avatar","alt","src","avatarUrls","moment","created","format","startOf","fromNow","updated","id","_data$issues","jiraBugData","useSelector","getJiraBugData","jiraDefectData","getJiraDefectData","jiraSecurityData","getJiraSecurityData","bug","setBug","useState","defect","setDefect","security","setSecurity","isLoading","setLoading","setData","dispatch","useDispatch","useEffect","async","length","retrieveJiraData","error","console","fetchData","_Fragment","issues","MainCard","shadows","Grid","container","spacing","gridSpacing","item","xs","sm","md","lg","JiraTable","textAlign","jiraReducerSelector","state","jiraReducer","unitReducerSelector","unitReducer","e2eReducerSelector","e2eReducer","createSelector","bugData","defectData","securityData","getProductUnitData","issueType","getProductE2EData","getState","jiraData","res","commonAxios","get","getJira","type","GET_JIRA","payload","err"],"sourceRoot":""}