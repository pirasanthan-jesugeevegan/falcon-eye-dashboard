{"version":3,"file":"static/js/816.946439d8.chunk.js","mappings":"gHAEA,Q,OAAeA,EAAMC,OAAO,CACxBC,QAAiD,mCACjDC,QAAS,CACL,eAAgB,qB,wDCHjBC,eAAeC,EAAmBC,GACrC,IAEI,aADkBC,EAAAA,EAAYC,IAAI,2CAADC,OAA4CH,KAClEI,IACf,CAAE,MAAOC,GACL,OAAOA,CACX,CACJ,CACOP,eAAeQ,EAAqBN,GACvC,IAEI,aADkBC,EAAAA,EAAYC,IAAI,+CAADC,OAAgDH,KACtEI,IACf,CAAE,MAAOC,GACL,OAAOA,CACX,CACJ,C,4ECfOP,eAAeS,EAAWC,GAC7B,IAEI,aADkBP,EAAAA,EAAYC,IAAI,eAADC,OAAgBK,KACtCJ,IACf,CAAE,MAAOC,GACL,OAAOA,CACX,CACJ,CACOP,eAAeW,IAClB,IAEI,aADkBR,EAAAA,EAAYC,IAAI,uBACvBE,IACf,CAAE,MAAOC,GACL,OAAOA,CACX,CACJ,CACOP,eAAeY,IAClB,IAEI,aADkBT,EAAAA,EAAYC,IAAI,2BACvBE,IACf,CAAE,MAAOC,GACL,OAAOA,CACX,CACJ,CACOP,eAAea,EAAYH,GAC9B,IAEI,aADkBP,EAAAA,EAAYC,IAAI,gBAADC,OAAiBK,KACvCJ,IACf,CAAE,MAAOC,GACL,OAAOA,CACX,CACJ,C,mHCfA,MAAMO,EAAW,CACb,0BAA2B,CAAEC,GAAI,IA4DrC,GAzDiBC,EAAAA,EAAAA,aACb,CAAAC,EAeIC,KACE,IAfF,OACIC,GAAS,EAAI,UACbC,EAAS,SACTC,EAAQ,QACRC,GAAU,EAAI,aACdC,EAAe,GAAE,UACjBC,EAAY,CAAC,EAAC,UACdC,EAAS,UACTC,EAAS,OACTC,EAAM,GACNC,EAAK,CAAC,EAAC,MACPC,KACGC,GACSb,EAGhB,MAAMc,GAAQC,EAAAA,EAAAA,KAEd,OACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDhB,IAAKA,KACDY,EACJF,GAAI,CACAT,OAAQA,EAAS,YAAc,OAC/BgB,YAAaJ,EAAMK,QAAQC,QAAQC,MAAQ,GAC3C,SAAU,CACNlB,UAAWA,EAAYO,GAAU,kCAAoC,cAEtEC,GACLP,SAAA,CAGDQ,IACGU,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACPZ,GAAId,EACJe,MAAOJ,GAAYc,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,KAAIrB,SAAEQ,IAAsBA,EACnEc,OAAQjB,IAKfG,IAASU,EAAAA,EAAAA,KAACK,EAAAA,EAAO,IAGjBtB,IACGiB,EAAAA,EAAAA,KAACM,EAAAA,EAAW,CAACjB,GAAIJ,EAAWsB,UAAWvB,EAAaF,SAC/CA,KAGPC,GAAWD,IACV,G,8KCvEnB,MAiBA,EAjBwB0B,KACpBR,EAAAA,EAAAA,KAACL,EAAAA,EAAI,CAACN,GAAI,CAAEoB,EAAG,GAAI3B,UACfkB,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CAACrB,GAAI,CAAEsB,GAAI,GAAI7B,UAChBY,EAAAA,EAAAA,MAACkB,EAAAA,GAAQ,CAACC,WAAW,SAASC,gBAAc,EAACzB,GAAI,CAAEsB,GAAI,GAAI7B,SAAA,EACvDkB,EAAAA,EAAAA,KAACe,EAAAA,EAAc,CAAAjC,UACXkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAcc,MAAO,GAAIC,OAAQ,QAEvDlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAY,CACT9B,GAAI,CAAEsB,GAAI,GACVb,SAASE,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,KACjD/B,WAAWa,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,kBCE3CiB,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAA4C3C,IAAA,IAAC,MAAEc,EAAK,gBAAE+B,GAAiB7C,EAAA,MAAM,CAC7F6C,gBAAwC,UAAvB/B,EAAMK,QAAQ2B,KAAmBD,GAAmBA,EAAgBE,KAAOjC,EAAMK,QAAQ4B,KAAKA,KAC/GC,MAAOH,GAAmBA,EAAgBxB,MAC1C4B,SAAU,SACVC,SAAU,WACV,UAAW,CACP7C,QAAS,KACT6C,SAAU,WACVX,MAAO,IACPC,OAAQ,IACRW,WAAW,8BAAD/D,OACNyD,EAAkBA,EAAgB,KAAO/B,EAAMK,QAAQiC,QAAQL,KAAI,4CAEvEM,aAAc,MACdC,KAAM,GACNC,OAAQ,KAEZ,WAAY,CACRlD,QAAS,KACT6C,SAAU,WACVX,MAAO,IACPC,OAAQ,IACRW,WAAW,6BAAD/D,OACNyD,EAAkBA,EAAgB,KAAO/B,EAAMK,QAAQiC,QAAQL,KAAI,4CAEvEM,aAAc,MACdC,KAAM,IACNC,OAAQ,KAEf,IAqGD,EAnG4CC,IAAoE,IAAnE,UAAEC,EAAS,MAAE7C,EAAK,SAAE8C,EAAQ,OAAEC,EAAM,KAAEC,EAAI,gBAAEf,GAAiBW,EACtG,MAAM1C,GAAQC,EAAAA,EAAAA,KAYR8C,EAAwBA,CAAChB,EAAsB/B,IACzB,YAApB+B,EACO/B,EAAMK,QAAQC,QACM,cAApByB,EACA/B,EAAMK,QAAQV,eADlB,EAMX,OACIa,EAAAA,EAAAA,KAAAwC,EAAAA,SAAA,CAAA1D,UACKqD,GAAc7C,GAAU+C,GAGrBrC,EAAAA,EAAAA,KAACoB,EAAW,CACRxC,QAAQ,EACRG,SAAS,EACTwC,gBAAiBgB,EAAsBhB,EAAiB/B,GACxDH,GAAI,CAAER,UAAWW,EAAMiD,QAAQ,KAAM3D,UAErCkB,EAAAA,EAAAA,KAAC0C,EAAAA,EAAG,CAACrD,GAAI,CAAEoB,EAAG,GAAI3B,UACdkB,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CAACrB,GAAI,CAAEsB,GAAI,GAAI7B,UAChBY,EAAAA,EAAAA,MAACkB,EAAAA,GAAQ,CAACC,WAAW,SAASC,gBAAc,EAACzB,GAAI,CAAEsB,GAAI,GAAI7B,SAAA,EACvDkB,EAAAA,EAAAA,KAACe,EAAAA,EAAc,CAAAjC,UACXkB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAM,CACHxC,QAAQ,UACRd,GAAI,IACGG,EAAMoD,WAAWC,gBACjBrD,EAAMoD,WAAWE,YACpBvB,gBAC2B,UAAvB/B,EAAMK,QAAQ2B,KACRD,EACIgB,EAAsBhB,EAAiB/B,GAAO,KAC9CA,EAAMK,QAAQiC,QAAQ/B,MAC1BP,EAAMK,QAAQ4B,KAAKsB,KAC7BrB,MAAOH,EAAkB,OAAS/B,EAAMK,QAAQiC,QAAQL,MAC1D3C,SAEDwD,OAGTtC,EAAAA,EAAAA,KAACmB,EAAAA,EAAY,CACT9B,GAAI,CACAsB,GAAI,EACJqC,GAAI,IACJC,GAAI,KAERnD,SACIE,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CACPC,QAAQ,KACRd,GAAI,CACAqC,MAAOH,GAAmB,QAC5BzC,SAEDQ,IAGTH,WACIa,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CACPC,QAAQ,YACRd,GAAI,CACAqC,MAAOH,EAAkB,gBAAkB/B,EAAMK,QAAQqD,KAAK,KAC9DF,GAAI,KACNlE,SAEDsD,OAIbpC,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CACPC,QAAQ,KACRd,GAAI,CACAqC,MAnFhByB,EAAC5B,EAAqCc,IACvC,OAAXA,EACO7C,EAAMK,QAAQuD,QAAQL,KACX,UAAXV,EACA7C,EAAMK,QAAQwD,OAAO5B,KACrBF,EACA,OAEA,QA2E4B4B,CAAY5B,EAAiBc,IACtCvD,SAEDuD,cA/DrBrC,EAAAA,EAAAA,KAACQ,EAAe,KAsErB,C,0NCvIX,MAiJA,EAjJoB8C,KAChB5D,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAAb,SAAA,EACDkB,EAAAA,EAAAA,KAACM,EAAAA,EAAW,CAAAxB,UACRY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAACC,QAASC,EAAAA,GAAY5E,SAAA,EACjCkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAASgD,eAAe,gBAAgBJ,QAASC,EAAAA,GAAY5E,SAAA,EACpFkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,IAAE,EAACE,cAAY,EAAAhF,UACtBkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,QAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,GAAID,MAAO,aAI/DjB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,SAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE3E,SAAA,EACvBkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAAS4C,QAASC,EAAAA,GAAaG,eAAe,gBAAe/E,SAAA,EACpFkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,QAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAAS4C,QAASC,EAAAA,GAAaG,eAAe,gBAAe/E,SAAA,EACpFkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,IAAE,EAACE,cAAY,EAAAhF,UACtBkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,QAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,GAAID,MAAO,kBAMvEjB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,aAIpDlB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE3E,SAAA,EACvBkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAAS4C,QAASC,EAAAA,GAAaG,eAAe,gBAAe/E,SAAA,EACpFkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,QAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAAS4C,QAASC,EAAAA,GAAaG,eAAe,gBAAe/E,SAAA,EACpFkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,IAAE,EAACE,cAAY,EAAAhF,UACtBkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,QAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,GAAID,MAAO,kBAMvEjB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,aAIpDlB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE3E,SAAA,EACvBkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAAS4C,QAASC,EAAAA,GAAaG,eAAe,gBAAe/E,SAAA,EACpFkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,QAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAAS4C,QAASC,EAAAA,GAAaG,eAAe,gBAAe/E,SAAA,EACpFkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,IAAE,EAACE,cAAY,EAAAhF,UACtBkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,QAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,GAAID,MAAO,kBAMvEjB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,aAIpDlB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE3E,SAAA,EACvBkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAAS4C,QAASC,EAAAA,GAAaG,eAAe,gBAAe/E,SAAA,EACpFkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,QAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAAS4C,QAASC,EAAAA,GAAaG,eAAe,gBAAe/E,SAAA,EACpFkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,IAAE,EAACE,cAAY,EAAAhF,UACtBkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,QAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,GAAID,MAAO,kBAMvEjB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,aAIpDlB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE3E,SAAA,EACvBkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAAS4C,QAASC,EAAAA,GAAaG,eAAe,gBAAe/E,SAAA,EACpFkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,QAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAAS4C,QAASC,EAAAA,GAAaG,eAAe,gBAAe/E,SAAA,EACpFkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,IAAE,EAACE,cAAY,EAAAhF,UACtBkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,QAE5ClB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,GAAID,MAAO,kBAMvEjB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAE9E,UACbkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,kBAM5DlB,EAAAA,EAAAA,KAACM,EAAAA,EAAW,CAACjB,GAAI,CAAEoB,EAAG,KAAMsD,QAAS,OAAQC,GAAI,EAAGH,eAAgB,UAAW/E,UAC3EkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,GAAID,MAAO,U,iCCvI/D,MA6DA,EA7DYvC,IAAgC,IAA/B,MAAEY,EAAK,KAAEvB,GAAgBW,EAClC,MAAMc,GAAQC,EAAAA,EAAAA,KAEd,IAAK1B,EACD,OAAO,KAGX,MAAM,OAAEkG,EAAM,OAAE5B,GAAWtE,EAC3B,OACI2B,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAACU,UAAU,SAAQpF,SAAA,EAC9BkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAASgD,eAAe,gBAAe/E,SAAA,EAC9DkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,YAAYuB,MAAM,UAAS5C,SAC1CQ,OAGTU,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAASgD,eAAe,gBAAe/E,SAAA,EAC9DkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,YAAYuB,MAAM,UAAS5C,SAC1CmF,EAAOE,mBAGhBnE,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAM,CACHxC,QAAQ,UACRd,GAAI,CACA4B,MAAO,GACPC,OAAQ,GACRa,aAAc,MACdR,gBAA4B,SAAX0C,EAAoBzE,EAAMK,QAAQuD,QAAQrD,MAAQP,EAAMK,QAAQwD,OAAOtD,MACxF2B,MAAkB,SAAXuC,EAAoBzE,EAAMK,QAAQuD,QAAQ3B,KAAOjC,EAAMK,QAAQwD,OAAO5B,KAC7E2C,GAAI,GACNtF,SAEU,SAAXmF,GACGjE,EAAAA,EAAAA,KAACqE,EAAAA,EAAc,CAACC,SAAS,QAAQ5C,MAAM,aAEvC1B,EAAAA,EAAAA,KAACuE,EAAAA,EAAa,CAACD,SAAS,QAAQ5C,MAAM,2BAQlE1B,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CACPC,QAAQ,YACRd,GAAI,CACAqC,MAAkB,SAAXuC,EAAoB,eAAiB,eAC9CnF,SAEDuD,QAGN,ECDf,EA1D0B3D,IAA4C,IAA3C,UAAEyD,GAAmCzD,EAC5D,MAAOX,EAAMyG,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAeC,IAAoBF,EAAAA,EAAAA,WAAkB,GACtDjF,GAAQC,EAAAA,EAAAA,KAkBd,OAhBAmF,EAAAA,EAAAA,YAAU,KACYnH,WACd,IACI,MAAM4E,QAAejE,EAAAA,EAAAA,MACrBoG,EAAQnC,GACRsC,GAAiB,EACrB,CAAE,MAAO3G,GACL6G,QAAQ7G,MAAM,uBAAwBA,EAC1C,CAAC,QACG2G,GAAiB,EACrB,GAGJG,EAAW,GACZ,KAGC9E,EAAAA,EAAAA,KAAAwC,EAAAA,SAAA,CAAA1D,SACKqD,GAAauC,IAAkB3G,GAC5BiC,EAAAA,EAAAA,KAAC+E,EAAmB,KAEpB/E,EAAAA,EAAAA,KAACsB,EAAAA,EAAQ,CACLvC,SAAS,EACTM,GAAI,CACAR,UAAWW,EAAMiD,QAAQ,IACzBlB,gBAAwC,SAAvB/B,EAAMK,QAAQ2B,MAAmBhC,EAAMK,QAAQ4B,KAAKA,MACvE3C,UAEFkB,EAAAA,EAAAA,KAACM,EAAAA,EAAW,CAAAxB,UACRY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAACC,QAASC,EAAAA,GAAY5E,SAAA,EACjCkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACC,WAAS,EAACwB,aAAa,SAASnB,eAAe,gBAAe/E,UAChEkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,KAAIrB,SAAC,2BAIrCkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,SACT,OAAJf,QAAI,IAAJA,OAAI,EAAJA,EAAMkH,KAAKC,IACRxF,EAAAA,EAAAA,MAAA8C,EAAAA,SAAA,CAAA1D,SAAA,EACIkB,EAAAA,EAAAA,KAACmF,EAAG,CAAC7F,MAAO4F,EAAQE,KAAMrH,KAAMmH,KAChClF,EAAAA,EAAAA,KAACK,EAAAA,EAAO,CAAChB,GAAI,CAAEgG,GAAI,sBAQhD,E,uBC3DX,MAsBA,EAtBkBC,KACdtF,EAAAA,EAAAA,KAACL,EAAAA,EAAI,CAAAb,UACDkB,EAAAA,EAAAA,KAACM,EAAAA,EAAW,CAAAxB,UACRY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAACU,UAAU,SAAQpF,SAAA,EAC9BkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACC,WAAS,EAACK,eAAe,gBAAe/E,UAC1CkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAcc,MAAO,GAAIC,OAAQ,YAI/DlB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAcd,GAAI,CAAEgG,GAAI,GAAKnE,OAAQ,QAE3DlB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CAACb,QAAQ,cAAce,OAAQ,cCLtDE,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAA2C3C,IAAA,IAAC,MAAEc,EAAK,gBAAE+B,GAAiB7C,EAAA,MAAM,CAC5F6C,gBAAwC,UAAvB/B,EAAMK,QAAQ2B,KAAmBD,EAAgBE,KAAOjC,EAAMK,QAAQ4B,KAAKA,KAC5FC,MAAO,OACPC,SAAU,SACVC,SAAU,WACV,UAAW,CACP7C,QAAS,KACT6C,SAAU,WACVX,MAAO,IACPC,OAAQ,IACRW,WAC2B,UAAvBrC,EAAMK,QAAQ2B,KACRD,EAAgB,KAChB,qFACVQ,aAAc,MACdC,KAAM,GACNC,OAAQ,GACR,CAACzC,EAAM+F,YAAYC,KAAK,OAAQ,CAC5BxD,KAAM,IACNC,OAAQ,MAGhB,WAAY,CACRlD,QAAS,KACT6C,SAAU,WACVX,MAAO,IACPC,OAAQ,IACRW,WAAYN,EAAgB,KAC5BQ,aAAc,MACdC,KAAM,IACNC,OAAQ,GACRwD,QAAS,GACT,CAACjG,EAAM+F,YAAYC,KAAK,OAAQ,CAC5BxD,KAAM,IACNC,OAAQ,KAGnB,IAwFD,EAtF4CC,IAA4D,IAA3D,UAAEC,EAAS,MAAE7C,EAAK,SAAE8C,EAAQ,KAAEE,EAAI,gBAAEf,GAAiBW,EAC9F,MAAM1C,GAAQC,EAAAA,EAAAA,KACRiG,EAAOpD,EACPC,EAAwBA,CAAChB,EAAsB/B,IACzB,YAApB+B,EACO/B,EAAMK,QAAQC,QACM,cAApByB,EACA/B,EAAMK,QAAQV,UAEdK,EAAMK,QAAQC,QAI7B,OACIE,EAAAA,EAAAA,KAAAwC,EAAAA,SAAA,CAAA1D,SACKqD,IAAc7C,GACXU,EAAAA,EAAAA,KAAC2F,EAAmB,KAEpB3F,EAAAA,EAAAA,KAACoB,EAAW,CACRxC,QAAQ,EACRG,SAAS,EACTwC,gBAAiBgB,EAAsBhB,EAAiB/B,IAAU,UAClEH,GAAI,CAAER,UAAWW,EAAMiD,QAAQ,KAAM3D,UAErCkB,EAAAA,EAAAA,KAAC0C,EAAAA,EAAG,CAACrD,GAAI,CAAEoB,EAAG,MAAO3B,UACjBY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAACU,UAAU,SAAQpF,SAAA,EAC9BkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACC,WAAS,EAACK,eAAe,gBAAe/E,UAC1CkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAM,CACHxC,QAAQ,UACRd,GAAI,IACGG,EAAMoD,WAAWC,gBACjBrD,EAAMoD,WAAWE,YACpBvB,gBAAiBgB,EAAsBhB,EAAiB/B,GAAO,KAC/DwD,GAAI,GACNlE,SAED4G,EACmB,kBAATA,GACH1F,EAAAA,EAAAA,KAAA,OAAK4F,IAAKtD,EAAgBuD,IAAI,kBAE9B7F,EAAAA,EAAAA,KAAC0F,EAAI,CAACI,OAAQ,IAAKC,KAAK,SAASrE,MAAM,YAE3C,cAKpB1B,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACC,WAAS,EAAC3C,WAAW,SAAQ/B,UAC/BkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAAA7E,UACNkB,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CACPb,GAAI,CACAiF,SAAU,WACV0B,WAAY,IACZxH,GAAI,EACJwE,GAAI,KACJC,GAAI,KACNnE,SAEDQ,WAKjBU,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACtE,GAAI,CAAE4D,GAAI,MAAOnE,UACxBkB,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CACPb,GAAI,CACAiF,SAAU,OACV0B,WAAY,IACZtE,MAC2B,UAAvBlC,EAAMK,QAAQ2B,KAAmBe,EAAsBhB,EAAiB/B,GAAO,KAAO,WAC5FV,SAEDsD,cAO1B,E,kCCpHX,MA0IA,EA1IkB6D,KAAO,IAADC,EAAAC,EACpB,MAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,GAAiBF,EAAAA,EAAAA,IAAYG,EAAAA,IAC7BC,GAAmBJ,EAAAA,EAAAA,IAAYK,EAAAA,KAE9BC,EAAKC,IAAUrC,EAAAA,EAAAA,UAAwB6B,IACvCS,EAAQC,IAAavC,EAAAA,EAAAA,UAAwBgC,IAC7CQ,EAAUC,IAAezC,EAAAA,EAAAA,UAAwBkC,IACjD5I,EAAMyG,IAAWC,EAAAA,EAAAA,UAAc,KAC/B0C,EAA2BC,IAAgC3C,EAAAA,EAAAA,UAAiC,KAC5F4C,EAAyBC,IAA8B7C,EAAAA,EAAAA,UAAiC,KACxFtC,EAAWoF,IAAc9C,EAAAA,EAAAA,WAAkB,GA4ClD,OA1CAG,EAAAA,EAAAA,YAAU,KACN2C,GAAW,GACO9J,WACd,IACI,MAAM4E,QAAehE,EAAAA,EAAAA,MAEhBiI,GAAsC,IAAvBA,EAAYkB,QAE5BV,QAAaV,GAASqB,EAAAA,EAAAA,GAAiB,SAEtChB,GAA4C,IAA1BA,EAAee,QAClCR,QAEUZ,GAASqB,EAAAA,EAAAA,GAAiB,qBAInCd,GAAgD,IAA5BA,EAAiBa,QACtCN,QAEUd,GAASqB,EAAAA,EAAAA,GAAiB,oBAIxC,MAAMC,QAA8BzJ,EAAAA,EAAAA,GAAqB,6BACnD0J,QAA4B1J,EAAAA,EAAAA,GAAqB,2BAEvDuG,EAAQnC,GAER+E,EAA6BM,GAC7BJ,EAA2BK,GAC3BJ,GAAW,EACf,CAAE,MAAOvJ,GACL6G,QAAQ7G,MAAM,uBAAwBA,EAC1C,CAAC,QACGuJ,GAAW,EACf,GAGJzC,EAAW,GACZ,CAACsB,EAAUE,EAAaG,EAAgBE,KAGvC3G,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACC,WAAS,EAACC,QAASC,EAAAA,GAAY5E,UACjCkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG9E,UACdY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACC,WAAS,EAAA1E,SAAA,EACXY,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACI,MAAI,EAACiE,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIlE,GAAI,GAAG9E,SAAA,EACpCkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAAClE,GAAI,CAAE0I,QAAS,OAAQjJ,UACzBkB,EAAAA,EAAAA,KAACsF,EAAS,CACNnD,UAAWA,EACX7C,MAAOvB,EAAKiK,WACZ5F,SAAS,kBACTE,KAAM2F,EAAAA,IACN1G,gBAAgB,eAGxBvB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAAClE,GAAI,CAAE0I,QAAS,OAAQjJ,UACzBkB,EAAAA,EAAAA,KAACsF,EAAS,CACNnD,UAAWA,EACX7C,MAAK,GAAAxB,OAAQ,OAAH+I,QAAG,IAAHA,OAAG,EAAHA,EAAKqB,MAAK,SACpB9F,SAAS,+BACTE,KAAM6F,EAAAA,IACN5G,gBAAgB,oBAI5B7B,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACI,MAAI,EAACiE,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIlE,GAAI,GAAG9E,SAAA,EACpCkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAAClE,GAAI,CAAE0I,QAAS,OAAQjJ,UACzBkB,EAAAA,EAAAA,KAACsF,EAAS,CACNnD,UAAWA,EACX7C,MAAK,GAAAxB,OAAW,OAANiJ,QAAM,IAANA,OAAM,EAANA,EAAQmB,MAAK,YACvB9F,SAAS,8BACTE,KAAM8F,EAAAA,IACN7G,gBAAgB,iBAGxBvB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAAClE,GAAI,CAAE0I,QAAS,OAAQjJ,UACzBkB,EAAAA,EAAAA,KAACsF,EAAS,CACNnD,UAAWA,EACX7C,MAAK,GAAAxB,OAAa,OAARmJ,QAAQ,IAARA,OAAQ,EAARA,EAAUiB,MAAK,mBACzB9F,SAAS,uCACTE,KAAM+F,EAAAA,IACN9G,gBAAgB,kBAI5B7B,EAAAA,EAAAA,MAAC6D,EAAAA,GAAI,CAACI,MAAI,EAACiE,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIlE,GAAI,GAAG9E,SAAA,EASpCkB,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAAClE,GAAI,CAAE0I,QAAS,OAAQjJ,UACzBkB,EAAAA,EAAAA,KAACsI,EAAAA,EAAS,CACNnG,UAAWA,EACX7C,MAAM,kBACN8C,SAAS,aACTC,OAAQkG,MAAMC,QAAQrB,GAA6B,KAA8C,QAA1CjB,EAAGiB,EAA0BsB,qBAAa,IAAAvC,OAAA,EAAvCA,EAAyCjC,OACnG3B,MAAMtC,EAAAA,EAAAA,KAAC0I,EAAAA,EAAe,CAACpE,SAAS,iBAGxCtE,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAAClE,GAAI,CAAE0I,QAAS,OAAQjJ,UACzBkB,EAAAA,EAAAA,KAACsI,EAAAA,EAAS,CACNnG,UAAWA,EACX7C,MAAM,gBACN8C,SAAS,aACTC,OAAQkG,MAAMC,QAAQnB,GAA2B,KAA4C,QAAxClB,EAAGkB,EAAwBoB,qBAAa,IAAAtC,OAAA,EAArCA,EAAuClC,OAC/F3B,MAAMtC,EAAAA,EAAAA,KAAC2I,EAAAA,EAAW,CAACrE,SAAS,iBAGpCtE,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAAClE,GAAI,CAAE0I,QAAS,OAAQjJ,UACzBkB,EAAAA,EAAAA,KAACsD,EAAW,CAACnB,UAAWA,eAKrC,C,oFCvJf,MAAMyG,EAAuBC,GAAgCA,EAAMC,YAC7DC,EAAuBF,GAAgCA,EAAMG,YAC7DC,EAAsBJ,GAA+BA,EAAMK,WAEpD1C,GAAiB2C,EAAAA,EAAAA,IAAe,CAACP,IAAuBE,GAAgBA,EAAYM,UACpF1C,GAAoByC,EAAAA,EAAAA,IAAe,CAACP,IAAuBE,GAAgBA,EAAYO,aACvFzC,GAAsBuC,EAAAA,EAAAA,IAAe,CAACP,IAAuBE,GAAgBA,EAAYQ,eAEzFC,EAAsBC,IAAsBL,EAAAA,EAAAA,IAAe,CAACJ,IAAuBC,GAAgBA,EAAYQ,KAC/GC,EAAqBD,IAAsBL,EAAAA,EAAAA,IAAe,CAACF,IAAsBC,GAAeA,EAAWM,I,8DCLjH,MAAM/B,EAAoB+B,GAAsB/L,MAAO2I,EAAoBsD,KAC9E,MAAMC,EAAWD,IAAWZ,YAAYU,GAExC,IAAKG,GAAgC,IAApBA,EAASnC,OACtB,IACI,MAAMoC,QCTXnM,eAAuB+L,GAC1B,IAEI,aADkB5L,EAAAA,EAAYC,IAAI,oDAADC,OAAqD0L,EAAS,kCACpFzL,IACf,CAAE,MAAOC,GAEL,MADA6G,QAAQ7G,MAAM,4BAA6BA,GACrCA,CACV,CACJ,CDC8B6L,CAAQL,GAQ1B,OAPApD,EAAS,CACL0D,KAAMC,EAAAA,GACNC,QAAS,CACLR,YACAzL,KAAM6L,KAGPA,CACX,CAAE,MAAOK,GAEL,MADApF,QAAQ7G,MAAM,8BAA+BiM,GACvCA,CACV,CAGJ,OAAON,CAAQ,C,qBEvBfO,EAAyBC,EAAQ,MAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,OAChDG,EAAcH,EAAQ,GACXC,EAAQ,GAAU,EAAIC,EAAeE,UAAuB,EAAID,EAAYE,KAAK,OAAQ,CACtGC,EAAG,qMACD,Y,oBCTAP,EAAyBC,EAAQ,MAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,OAChDG,EAAcH,EAAQ,GACXC,EAAQ,GAAU,EAAIC,EAAeE,UAAuB,EAAID,EAAYE,KAAK,OAAQ,CACtGC,EAAG,kQACD,a","sources":["api/Common.ts","api/get-sonar-cloud-data.ts","api/get-test-data.ts","components/Cards/MainCard.tsx","components/Cards/Skeleton/TotalIncomeCard.tsx","components/Cards/SmallCard.tsx","components/Cards/Skeleton/PopularCard.tsx","components/Row.tsx","components/Cards/E2ETestStatusCard.tsx","components/Cards/Skeleton/LargeCard.tsx","components/Cards/LargeCard.tsx","pages/Dashboard.tsx","redux/selectors/index.ts","redux/thunks/jira.ts","api/get-jira-data.ts","../../../node_modules/@mui/icons-material/ThumbDown.js","../../../node_modules/@mui/icons-material/ThumbUpAlt.js"],"sourcesContent":["import axios from 'axios'\n\nexport default axios.create({\n    baseURL: process.env.NODE_ENV === 'production' ? 'https://sdsdsd-9p5b.onrender.com' : 'http://localhost:5001',\n    headers: {\n        'Content-type': 'application/json',\n    },\n})\n","import commonAxios from './Common'\n\nexport async function getPullRequestData(project: string) {\n    try {\n        const req = await commonAxios.get(`/api/project_pull_requests/list?project=${project}`)\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\nexport async function getProjectStatusData(project: string) {\n    try {\n        const req = await commonAxios.get(`/api/qualitygates/project_status?projectKey=${project}`)\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\n","import commonAxios from './Common'\n\nexport async function getE2EData(endpoint: string) {\n    try {\n        const req = await commonAxios.get(`/api/v1/e2e/${endpoint}`)\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\nexport async function getStatus() {\n    try {\n        const req = await commonAxios.get('/api/v1/e2e/status')\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\nexport async function getE2eTotalTest() {\n    try {\n        const req = await commonAxios.get('/api/v1/e2e/totalTests')\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\nexport async function getUnitData(endpoint: string) {\n    try {\n        const req = await commonAxios.get(`/api/v1/unit/${endpoint}`)\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\n","import React, { forwardRef } from 'react'\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\ninterface MainCardProps {\n    border?: boolean\n    boxShadow?: boolean\n    children?: React.ReactNode\n    content?: boolean\n    contentClass?: string\n    contentSX?: Record<string, unknown>\n    darkTitle?: boolean\n    secondary?: React.ReactNode\n    shadow?: string\n    sx?: Record<string, unknown>\n    title?: React.ReactNode\n}\n\nconst headerSX = {\n    '& .MuiCardHeader-action': { mr: 0 },\n}\n\nconst MainCard = forwardRef<HTMLDivElement, MainCardProps>(\n    (\n        {\n            border = true,\n            boxShadow,\n            children,\n            content = true,\n            contentClass = '',\n            contentSX = {},\n            darkTitle,\n            secondary,\n            shadow,\n            sx = {},\n            title,\n            ...others\n        }: MainCardProps,\n        ref\n    ) => {\n        const theme = useTheme()\n\n        return (\n            <Card\n                ref={ref}\n                {...others}\n                sx={{\n                    border: border ? '1px solid' : 'none',\n                    borderColor: theme.palette.primary.light + 25,\n                    ':hover': {\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit',\n                    },\n                    ...sx,\n                }}\n            >\n                {/* card header and action */}\n                {title && (\n                    <CardHeader\n                        sx={headerSX}\n                        title={darkTitle ? <Typography variant=\"h3\">{title}</Typography> : title}\n                        action={secondary}\n                    />\n                )}\n\n                {/* content & header divider */}\n                {title && <Divider />}\n\n                {/* card content */}\n                {content && (\n                    <CardContent sx={contentSX} className={contentClass}>\n                        {children}\n                    </CardContent>\n                )}\n                {!content && children}\n            </Card>\n        )\n    }\n)\n\nexport default MainCard\n","import { Card, List, ListItem, ListItemAvatar, ListItemText, Skeleton } from '@mui/material'\nimport React from 'react'\n\nconst TotalIncomeCard = () => (\n    <Card sx={{ p: 2 }}>\n        <List sx={{ py: 0 }}>\n            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\n                <ListItemAvatar>\n                    <Skeleton variant=\"rectangular\" width={44} height={44} />\n                </ListItemAvatar>\n                <ListItemText\n                    sx={{ py: 0 }}\n                    primary={<Skeleton variant=\"rectangular\" height={20} />}\n                    secondary={<Skeleton variant=\"text\" />}\n                />\n            </ListItem>\n        </List>\n    </Card>\n)\n\nexport default TotalIncomeCard\n","import { Avatar, Box, List, ListItem, ListItemAvatar, ListItemText, Typography } from '@mui/material'\nimport { styled, useTheme } from '@mui/material/styles'\nimport React from 'react'\nimport MainCard from './MainCard'\nimport TotalIncomeCard from './Skeleton/TotalIncomeCard'\n\ninterface SmallCardProps {\n    isLoading?: boolean\n    title?: string\n    subtitle?: string\n    result?: string | null\n    icon?: React.ReactNode\n    backgroundColor?: string\n}\n\nconst CardWrapper = styled(MainCard)<{ backgroundColor?: any }>(({ theme, backgroundColor }) => ({\n    backgroundColor: theme.palette.mode === 'light' ? backgroundColor && backgroundColor.dark : theme.palette.dark.dark,\n    color: backgroundColor && backgroundColor.light,\n    overflow: 'hidden',\n    position: 'relative',\n    '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: `linear-gradient(210.04deg, ${\n            backgroundColor ? backgroundColor[200] : theme.palette.warning.dark\n        } -50.94%, rgba(144, 202, 249, 0) 83.49%)`,\n        borderRadius: '50%',\n        top: -30,\n        right: -180,\n    },\n    '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: `linear-gradient(140.9deg, ${\n            backgroundColor ? backgroundColor[200] : theme.palette.warning.dark\n        } -14.02%, rgba(144, 202, 249, 0) 77.58%)`,\n        borderRadius: '50%',\n        top: -160,\n        right: -130,\n    },\n}))\n\nconst SmallCard: React.FC<SmallCardProps> = ({ isLoading, title, subtitle, result, icon, backgroundColor }) => {\n    const theme = useTheme()\n    const resultColor = (backgroundColor: string | undefined, result: string | undefined) => {\n        if (result === 'OK') {\n            return theme.palette.success.main\n        } else if (result === 'ERROR') {\n            return theme.palette.orange.dark\n        } else if (backgroundColor) {\n            return '#fff'\n        } else {\n            return 'black'\n        }\n    }\n    const backgroundColorPicker = (backgroundColor: any, theme: any) => {\n        if (backgroundColor === 'primary') {\n            return theme.palette.primary\n        } else if (backgroundColor === 'secondary') {\n            return theme.palette.secondary\n        } else {\n            undefined\n        }\n    }\n    return (\n        <>\n            {isLoading || !title || !result ? (\n                <TotalIncomeCard />\n            ) : (\n                <CardWrapper\n                    border={false}\n                    content={false}\n                    backgroundColor={backgroundColorPicker(backgroundColor, theme)}\n                    sx={{ boxShadow: theme.shadows[10] }}\n                >\n                    <Box sx={{ p: 2 }}>\n                        <List sx={{ py: 0 }}>\n                            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\n                                <ListItemAvatar>\n                                    <Avatar\n                                        variant=\"rounded\"\n                                        sx={{\n                                            ...theme.typography.commonAvatar,\n                                            ...theme.typography.largeAvatar,\n                                            backgroundColor:\n                                                theme.palette.mode === 'light'\n                                                    ? backgroundColor\n                                                        ? backgroundColorPicker(backgroundColor, theme)[800]\n                                                        : theme.palette.warning.light\n                                                    : theme.palette.dark.main,\n                                            color: backgroundColor ? '#fff' : theme.palette.warning.dark,\n                                        }}\n                                    >\n                                        {icon}\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    sx={{\n                                        py: 0,\n                                        mt: 0.45,\n                                        mb: 0.45,\n                                    }}\n                                    primary={\n                                        <Typography\n                                            variant=\"h4\"\n                                            sx={{\n                                                color: backgroundColor && '#fff',\n                                            }}\n                                        >\n                                            {title}\n                                        </Typography>\n                                    }\n                                    secondary={\n                                        <Typography\n                                            variant=\"subtitle2\"\n                                            sx={{\n                                                color: backgroundColor ? 'primary.light' : theme.palette.grey[500],\n                                                mt: 0.25,\n                                            }}\n                                        >\n                                            {subtitle}\n                                        </Typography>\n                                    }\n                                />\n                                <Typography\n                                    variant=\"h2\"\n                                    sx={{\n                                        color: resultColor(backgroundColor, result),\n                                    }}\n                                >\n                                    {result}\n                                </Typography>\n                            </ListItem>\n                        </List>\n                    </Box>\n                </CardWrapper>\n            )}\n        </>\n    )\n}\n\nexport default SmallCard\n","import { Card, CardContent, Grid } from '@mui/material'\nimport Skeleton from '@mui/material/Skeleton'\n\nimport { gridSpacing } from '../../../redux/constants'\nimport React from 'react'\n\nconst PopularCard = () => (\n    <Card>\n        <CardContent>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                    <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\n                        <Grid item xs zeroMinWidth>\n                            <Skeleton variant=\"rectangular\" height={20} />\n                        </Grid>\n                        <Grid item>\n                            <Skeleton variant=\"rectangular\" height={20} width={20} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Skeleton variant=\"rectangular\" height={150} />\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={12}>\n                            <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\n                                <Grid item xs={6}>\n                                    <Skeleton variant=\"rectangular\" height={20} />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\n                                        <Grid item xs zeroMinWidth>\n                                            <Skeleton variant=\"rectangular\" height={20} />\n                                        </Grid>\n                                        <Grid item>\n                                            <Skeleton variant=\"rectangular\" height={16} width={16} />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Skeleton variant=\"rectangular\" height={20} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={12}>\n                            <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\n                                <Grid item xs={6}>\n                                    <Skeleton variant=\"rectangular\" height={20} />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\n                                        <Grid item xs zeroMinWidth>\n                                            <Skeleton variant=\"rectangular\" height={20} />\n                                        </Grid>\n                                        <Grid item>\n                                            <Skeleton variant=\"rectangular\" height={16} width={16} />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Skeleton variant=\"rectangular\" height={20} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={12}>\n                            <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\n                                <Grid item xs={6}>\n                                    <Skeleton variant=\"rectangular\" height={20} />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\n                                        <Grid item xs zeroMinWidth>\n                                            <Skeleton variant=\"rectangular\" height={20} />\n                                        </Grid>\n                                        <Grid item>\n                                            <Skeleton variant=\"rectangular\" height={16} width={16} />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Skeleton variant=\"rectangular\" height={20} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={12}>\n                            <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\n                                <Grid item xs={6}>\n                                    <Skeleton variant=\"rectangular\" height={20} />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\n                                        <Grid item xs zeroMinWidth>\n                                            <Skeleton variant=\"rectangular\" height={20} />\n                                        </Grid>\n                                        <Grid item>\n                                            <Skeleton variant=\"rectangular\" height={16} width={16} />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Skeleton variant=\"rectangular\" height={20} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={12}>\n                            <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\n                                <Grid item xs={6}>\n                                    <Skeleton variant=\"rectangular\" height={20} />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\n                                        <Grid item xs zeroMinWidth>\n                                            <Skeleton variant=\"rectangular\" height={20} />\n                                        </Grid>\n                                        <Grid item>\n                                            <Skeleton variant=\"rectangular\" height={16} width={16} />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Skeleton variant=\"rectangular\" height={20} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </CardContent>\n        <CardContent sx={{ p: 1.25, display: 'flex', pt: 0, justifyContent: 'center' }}>\n            <Skeleton variant=\"rectangular\" height={25} width={75} />\n        </CardContent>\n    </Card>\n)\n\nexport default PopularCard\n","import ThumbDownIcon from '@mui/icons-material/ThumbDown'\nimport ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt'\nimport { Avatar, Grid, Typography } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport React from 'react'\n\ninterface RowProps {\n    title?: string\n    data?: ProductsOverviewData\n}\n\nconst Row = ({ title, data }: RowProps) => {\n    const theme = useTheme()\n\n    if (!data) {\n        return null\n    }\n\n    const { status, result } = data\n    return (\n        <Grid container direction=\"column\">\n            <Grid item>\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                    <Grid item>\n                        <Typography variant=\"subtitle1\" color=\"inherit\">\n                            {title}\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                            <Grid item>\n                                <Typography variant=\"subtitle1\" color=\"inherit\">\n                                    {status.toUpperCase()}\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Avatar\n                                    variant=\"rounded\"\n                                    sx={{\n                                        width: 24,\n                                        height: 24,\n                                        borderRadius: '5px',\n                                        backgroundColor: status === 'pass' ? theme.palette.success.light : theme.palette.orange.light,\n                                        color: status === 'pass' ? theme.palette.success.dark : theme.palette.orange.dark,\n                                        ml: 2,\n                                    }}\n                                >\n                                    {status === 'pass' ? (\n                                        <ThumbUpAltIcon fontSize=\"small\" color=\"inherit\" />\n                                    ) : (\n                                        <ThumbDownIcon fontSize=\"small\" color=\"inherit\" />\n                                    )}\n                                </Avatar>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item>\n                <Typography\n                    variant=\"subtitle2\"\n                    sx={{\n                        color: status === 'pass' ? 'success.dark' : 'orange.dark',\n                    }}\n                >\n                    {result}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Row\n","import React, { useEffect, useState } from 'react'\nimport { CardContent, Divider, Grid, Typography } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport MainCard from './MainCard'\nimport SkeletonPopularCard from './Skeleton/PopularCard'\nimport Row from '../Row'\nimport { getStatus } from '../../api/get-test-data'\nimport { gridSpacing } from '../../redux/constants'\n\nconst E2ETestStatusCard = ({ isLoading }: { isLoading: boolean }) => {\n    const [data, setData] = useState([])\n    const [isDataLoading, setIsDataLoading] = useState<boolean>(true)\n    const theme = useTheme()\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const result = await getStatus()\n                setData(result)\n                setIsDataLoading(false)\n            } catch (error) {\n                console.error('Error fetching data:', error)\n            } finally {\n                setIsDataLoading(false)\n            }\n        }\n\n        fetchData()\n    }, [])\n\n    return (\n        <>\n            {isLoading || isDataLoading || !data ? (\n                <SkeletonPopularCard />\n            ) : (\n                <MainCard\n                    content={false}\n                    sx={{\n                        boxShadow: theme.shadows[10],\n                        backgroundColor: theme.palette.mode === 'dark' && theme.palette.dark.dark,\n                    }}\n                >\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12}>\n                                <Grid container alignContent=\"center\" justifyContent=\"space-between\">\n                                    <Grid item>\n                                        <Typography variant=\"h4\">E2E Test Status</Typography>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                                {data?.map((product: ProductsOverviewData) => (\n                                    <>\n                                        <Row title={product.name} data={product} />\n                                        <Divider sx={{ my: 1.5 }} />\n                                    </>\n                                ))}\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </MainCard>\n            )}\n        </>\n    )\n}\n\nexport default E2ETestStatusCard\n","import { Card, CardContent, Grid } from '@mui/material'\nimport Skeleton from '@mui/material/Skeleton'\nimport React from 'react'\n\nconst LargeCard = () => (\n    <Card>\n        <CardContent>\n            <Grid container direction=\"column\">\n                <Grid item>\n                    <Grid container justifyContent=\"space-between\">\n                        <Grid item>\n                            <Skeleton variant=\"rectangular\" width={44} height={44} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item>\n                    <Skeleton variant=\"rectangular\" sx={{ my: 2 }} height={40} />\n                </Grid>\n                <Grid item>\n                    <Skeleton variant=\"rectangular\" height={30} />\n                </Grid>\n            </Grid>\n        </CardContent>\n    </Card>\n)\n\nexport default LargeCard\n","import { Avatar, Box, Grid, Typography } from '@mui/material'\nimport { styled, useTheme } from '@mui/material/styles'\nimport MainCard from './MainCard'\nimport SkeletonEarningCard from './Skeleton/LargeCard'\nimport React from 'react'\n\ninterface LargeCardProps {\n    isLoading?: boolean\n    title?: string\n    subtitle?: string\n    icon?: React.ElementType | string\n    backgroundColor?: string\n}\n\nconst CardWrapper = styled(MainCard)<{ backgroundColor: any }>(({ theme, backgroundColor }) => ({\n    backgroundColor: theme.palette.mode === 'light' ? backgroundColor.dark : theme.palette.dark.dark,\n    color: '#fff',\n    overflow: 'hidden',\n    position: 'relative',\n    '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background:\n            theme.palette.mode === 'light'\n                ? backgroundColor[800]\n                : 'linear-gradient(140.9deg, rgb(101, 31, 255) -14.02%, rgba(144, 202, 249, 0) 85.5%)',\n        borderRadius: '50%',\n        top: -85,\n        right: -95,\n        [theme.breakpoints.down('sm')]: {\n            top: -105,\n            right: -140,\n        },\n    },\n    '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        background: backgroundColor[800],\n        borderRadius: '50%',\n        top: -125,\n        right: -15,\n        opacity: 0.5,\n        [theme.breakpoints.down('sm')]: {\n            top: -155,\n            right: -70,\n        },\n    },\n}))\n\nconst LargeCard: React.FC<LargeCardProps> = ({ isLoading, title, subtitle, icon, backgroundColor }) => {\n    const theme = useTheme()\n    const Icon = icon\n    const backgroundColorPicker = (backgroundColor: any, theme: any) => {\n        if (backgroundColor === 'primary') {\n            return theme.palette.primary\n        } else if (backgroundColor === 'secondary') {\n            return theme.palette.secondary\n        } else {\n            return theme.palette.primary\n        }\n    }\n\n    return (\n        <>\n            {isLoading || !title ? (\n                <SkeletonEarningCard />\n            ) : (\n                <CardWrapper\n                    border={false}\n                    content={false}\n                    backgroundColor={backgroundColorPicker(backgroundColor, theme) || 'primary'}\n                    sx={{ boxShadow: theme.shadows[10] }}\n                >\n                    <Box sx={{ p: 2.25 }}>\n                        <Grid container direction=\"column\">\n                            <Grid item>\n                                <Grid container justifyContent=\"space-between\">\n                                    <Grid item>\n                                        <Avatar\n                                            variant=\"rounded\"\n                                            sx={{\n                                                ...theme.typography.commonAvatar,\n                                                ...theme.typography.largeAvatar,\n                                                backgroundColor: backgroundColorPicker(backgroundColor, theme)[800],\n                                                mt: 1,\n                                            }}\n                                        >\n                                            {Icon ? ( // Check if Icon is defined\n                                                typeof Icon === 'string' ? (\n                                                    <img src={icon as string} alt=\"Notification\" />\n                                                ) : (\n                                                    <Icon stroke={1.5} size=\"1.3rem\" color=\"#ffffff\" />\n                                                )\n                                            ) : null}\n                                        </Avatar>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid item>\n                                <Grid container alignItems=\"center\">\n                                    <Grid item>\n                                        <Typography\n                                            sx={{\n                                                fontSize: '2.125rem',\n                                                fontWeight: 500,\n                                                mr: 1,\n                                                mt: 1.75,\n                                                mb: 0.75,\n                                            }}\n                                        >\n                                            {title}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid item sx={{ mb: 1.25 }}>\n                                <Typography\n                                    sx={{\n                                        fontSize: '1rem',\n                                        fontWeight: 500,\n                                        color:\n                                            theme.palette.mode === 'light' ? backgroundColorPicker(backgroundColor, theme)[200] : '#8492c4',\n                                    }}\n                                >\n                                    {subtitle}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </CardWrapper>\n            )}\n        </>\n    )\n}\n\nexport default LargeCard\n","import React, { useEffect, useState } from 'react'\nimport FingerprintIcon from '@mui/icons-material/Fingerprint'\nimport SupportIcon from '@mui/icons-material/Support'\nimport { Grid } from '@mui/material'\nimport { IconBug, IconHeadphones, IconShieldLock, IconTicket } from '@tabler/icons'\nimport { useDispatch, useSelector } from 'react-redux'\n// import { OverviewTraffic } from 'components/Charts/PieChat';\n// import TotalOrderLineChartCard from '../components/Cards/TotalOrderLineChartCard';\n// import TotalGrowthBarChart from '../components/Cards/TotalGrowthBarChart';\nimport { getProjectStatusData } from '../api/get-sonar-cloud-data'\nimport { getE2eTotalTest } from '../api/get-test-data'\n// import BajajAreaChartCard from '../components/Cards/BajajAreaChartCard';\nimport PopularCard from '../components/Cards/E2ETestStatusCard'\nimport LargeCard from '../components/Cards/LargeCard'\nimport SmallCard from '../components/Cards/SmallCard'\nimport { gridSpacing } from '../redux/constants'\nimport { getJiraBugData, getJiraDefectData, getJiraSecurityData } from '../redux/selectors'\nimport { retrieveJiraData } from '../redux/thunks/jira'\n\nconst Dashboard = () => {\n    const dispatch = useDispatch()\n\n    const jiraBugData = useSelector(getJiraBugData)\n    const jiraDefectData = useSelector(getJiraDefectData)\n    const jiraSecurityData = useSelector(getJiraSecurityData)\n\n    const [bug, setBug] = useState<IssueResponse>(jiraBugData)\n    const [defect, setDefect] = useState<IssueResponse>(jiraDefectData)\n    const [security, setSecurity] = useState<IssueResponse>(jiraSecurityData)\n    const [data, setData] = useState<any>([])\n    const [b2b2cSonarCloudStatusData, setB2b2cSonarCloudStatusData] = useState<ProjectStatusData | []>([])\n    const [txmSonarCloudStatusData, setTxmSonarCloudStatusData] = useState<ProjectStatusData | []>([])\n    const [isLoading, setLoading] = useState<boolean>(true)\n\n    useEffect(() => {\n        setLoading(true)\n        const fetchData = async () => {\n            try {\n                const result = await getE2eTotalTest()\n\n                if (!jiraBugData || jiraBugData.length === 0) {\n                    // @ts-ignore\n                    setBug(await dispatch(retrieveJiraData('bug')))\n                }\n                if (!jiraDefectData || jiraDefectData.length === 0) {\n                    setDefect(\n                        // @ts-ignore\n                        await dispatch(retrieveJiraData('customer defect'))\n                    )\n                }\n\n                if (!jiraSecurityData || jiraSecurityData.length === 0) {\n                    setSecurity(\n                        // @ts-ignore\n                        await dispatch(retrieveJiraData('security issue'))\n                    )\n                }\n\n                const b2b2cSonarCloudStatus = await getProjectStatusData('coincover_coincover-b2b2c')\n                const txmSonarCloudStatus = await getProjectStatusData('coincover_coincover-txm')\n\n                setData(result)\n\n                setB2b2cSonarCloudStatusData(b2b2cSonarCloudStatus)\n                setTxmSonarCloudStatusData(txmSonarCloudStatus)\n                setLoading(false)\n            } catch (error) {\n                console.error('Error fetching data:', error)\n            } finally {\n                setLoading(false)\n            }\n        }\n\n        fetchData()\n    }, [dispatch, jiraBugData, jiraDefectData, jiraSecurityData])\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <Grid container>\n                    <Grid item lg={4} md={6} sm={12} xs={12}>\n                        <Grid sx={{ padding: '8px' }}>\n                            <LargeCard\n                                isLoading={isLoading}\n                                title={data.totalTests}\n                                subtitle=\"Total E2E Tests\"\n                                icon={IconTicket}\n                                backgroundColor=\"primary\"\n                            />\n                        </Grid>\n                        <Grid sx={{ padding: '8px' }}>\n                            <LargeCard\n                                isLoading={isLoading}\n                                title={`${bug?.total} Bugs`}\n                                subtitle=\"Total Number of open Defects\"\n                                icon={IconBug}\n                                backgroundColor=\"secondary\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item lg={4} md={6} sm={12} xs={12}>\n                        <Grid sx={{ padding: '8px' }}>\n                            <LargeCard\n                                isLoading={isLoading}\n                                title={`${defect?.total} Defects`}\n                                subtitle=\"Total Number of open Defect\"\n                                icon={IconHeadphones}\n                                backgroundColor=\"secondary\"\n                            />\n                        </Grid>\n                        <Grid sx={{ padding: '8px' }}>\n                            <LargeCard\n                                isLoading={isLoading}\n                                title={`${security?.total} Security Issue`}\n                                subtitle=\"Total Number of open Security Issues\"\n                                icon={IconShieldLock}\n                                backgroundColor=\"primary\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item lg={4} md={6} sm={12} xs={12}>\n                        {/* <Grid sx={{ padding: '8px' }}>\n              <OverviewTraffic\n                chartSeries={[bug?.total, defect?.total, security?.total]}\n                labels={['Bugs', 'Defects', 'Security']}\n                sx={{ height: '100%' }}\n              />\n            </Grid> */}\n\n                        <Grid sx={{ padding: '8px' }}>\n                            <SmallCard\n                                isLoading={isLoading}\n                                title=\"coincover-b2b2c\"\n                                subtitle=\"SonarCloud\"\n                                result={Array.isArray(b2b2cSonarCloudStatusData) ? null : b2b2cSonarCloudStatusData.projectStatus?.status}\n                                icon={<FingerprintIcon fontSize=\"inherit\" />}\n                            />\n                        </Grid>\n                        <Grid sx={{ padding: '8px' }}>\n                            <SmallCard\n                                isLoading={isLoading}\n                                title=\"coincover-txm\"\n                                subtitle=\"SonarCloud\"\n                                result={Array.isArray(txmSonarCloudStatusData) ? null : txmSonarCloudStatusData.projectStatus?.status}\n                                icon={<SupportIcon fontSize=\"inherit\" />}\n                            />\n                        </Grid>\n                        <Grid sx={{ padding: '8px' }}>\n                            <PopularCard isLoading={isLoading} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Dashboard\n","import { createSelector } from 'reselect'\n\nconst jiraReducerSelector = (state: { jiraReducer: any }) => state.jiraReducer\nconst unitReducerSelector = (state: { unitReducer: any }) => state.unitReducer\nconst e2eReducerSelector = (state: { e2eReducer: any }) => state.e2eReducer\n\nexport const getJiraBugData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.bugData)\nexport const getJiraDefectData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.defectData)\nexport const getJiraSecurityData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.securityData)\n\nexport const getProductUnitData = (issueType: string) => createSelector([unitReducerSelector], (unitReducer) => unitReducer[issueType])\nexport const getProductE2EData = (issueType: string) => createSelector([e2eReducerSelector], (e2eReducer) => e2eReducer[issueType])\n","/* eslint-disable no-unused-vars */\nimport { Dispatch } from 'redux'\nimport { getJira } from '../../api/get-jira-data'\n\nimport { GET_JIRA } from '../actions'\n\nexport const retrieveJiraData = (issueType: string) => async (dispatch: Dispatch, getState: any) => {\n    const jiraData = getState().jiraReducer[issueType]\n\n    if (!jiraData || jiraData.length === 0) {\n        try {\n            const res = await getJira(issueType)\n            dispatch({\n                type: GET_JIRA,\n                payload: {\n                    issueType,\n                    data: res,\n                },\n            })\n            return res\n        } catch (err) {\n            console.error('Error retrieving Jira data:', err)\n            throw err\n        }\n    }\n\n    return jiraData\n}\n","import commonAxios from './Common'\n\nexport async function getJira(issueType: string) {\n    try {\n        const req = await commonAxios.get(`/rest/api/2/search?jql=project=PRODENG AND type=\"${issueType}\" AND status not in (\"Done\")`)\n        return req.data\n    } catch (error) {\n        console.error('Error fetching Jira data:', error)\n        throw error\n    }\n}\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2m4 0v12h4V3z\"\n}), 'ThumbDown');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2 20h2c.55 0 1-.45 1-1v-9c0-.55-.45-1-1-1H2zm19.83-7.12c.11-.25.17-.52.17-.8V11c0-1.1-.9-2-2-2h-5.5l.92-4.65c.05-.22.02-.46-.08-.66-.23-.45-.52-.86-.88-1.22L14 2 7.59 8.41C7.21 8.79 7 9.3 7 9.83v7.84C7 18.95 8.05 20 9.34 20h8.11c.7 0 1.36-.37 1.72-.97z\"\n}), 'ThumbUpAlt');"],"names":["axios","create","baseURL","headers","async","getPullRequestData","project","commonAxios","get","concat","data","error","getProjectStatusData","getE2EData","endpoint","getStatus","getE2eTotalTest","getUnitData","headerSX","mr","forwardRef","_ref","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","_jsxs","Card","borderColor","palette","primary","light","_jsx","CardHeader","Typography","variant","action","Divider","CardContent","className","TotalIncomeCard","p","List","py","ListItem","alignItems","disableGutters","ListItemAvatar","Skeleton","width","height","ListItemText","CardWrapper","styled","MainCard","backgroundColor","mode","dark","color","overflow","position","background","warning","borderRadius","top","right","_ref2","isLoading","subtitle","result","icon","backgroundColorPicker","_Fragment","shadows","Box","Avatar","typography","commonAvatar","largeAvatar","main","mt","mb","grey","resultColor","success","orange","PopularCard","Grid","container","spacing","gridSpacing","item","xs","justifyContent","zeroMinWidth","display","pt","status","direction","toUpperCase","ml","ThumbUpAltIcon","fontSize","ThumbDownIcon","setData","useState","isDataLoading","setIsDataLoading","useEffect","console","fetchData","SkeletonPopularCard","alignContent","map","product","Row","name","my","LargeCard","breakpoints","down","opacity","Icon","SkeletonEarningCard","src","alt","stroke","size","fontWeight","Dashboard","_b2b2cSonarCloudStatu","_txmSonarCloudStatusD","dispatch","useDispatch","jiraBugData","useSelector","getJiraBugData","jiraDefectData","getJiraDefectData","jiraSecurityData","getJiraSecurityData","bug","setBug","defect","setDefect","security","setSecurity","b2b2cSonarCloudStatusData","setB2b2cSonarCloudStatusData","txmSonarCloudStatusData","setTxmSonarCloudStatusData","setLoading","length","retrieveJiraData","b2b2cSonarCloudStatus","txmSonarCloudStatus","lg","md","sm","padding","totalTests","IconTicket","total","IconBug","IconHeadphones","IconShieldLock","SmallCard","Array","isArray","projectStatus","FingerprintIcon","SupportIcon","jiraReducerSelector","state","jiraReducer","unitReducerSelector","unitReducer","e2eReducerSelector","e2eReducer","createSelector","bugData","defectData","securityData","getProductUnitData","issueType","getProductE2EData","getState","jiraData","res","getJira","type","GET_JIRA","payload","err","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}