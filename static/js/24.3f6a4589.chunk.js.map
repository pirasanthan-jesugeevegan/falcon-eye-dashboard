{"version":3,"file":"static/js/24.3f6a4589.chunk.js","mappings":"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","sources":["api/Common.ts","api/get-sonar-cloud-data.ts","components/Cards/MainCard.tsx","components/Tables/SonarCloudTable.tsx","pages/SonarCloud.tsx","utils/name-converter.ts"],"sourcesContent":["import axios from 'axios'\n\nexport default axios.create({\n    baseURL: process.env.NODE_ENV === 'production' ? 'https://sdsdsd-9p5b.onrender.com' : 'http://localhost:5001',\n    headers: {\n        'Content-type': 'application/json',\n    },\n})\n","import commonAxios from './Common'\n\nexport async function getPullRequestData(project: string) {\n    try {\n        const req = await commonAxios.get(`/api/project_pull_requests/list?project=${project}`)\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\nexport async function getProjectStatusData(project: string) {\n    try {\n        const req = await commonAxios.get(`/api/qualitygates/project_status?projectKey=${project}`)\n        return req.data\n    } catch (error) {\n        return error\n    }\n}\n","import React, { forwardRef } from 'react'\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\ninterface MainCardProps {\n    border?: boolean\n    boxShadow?: boolean\n    children?: React.ReactNode\n    content?: boolean\n    contentClass?: string\n    contentSX?: Record<string, unknown>\n    darkTitle?: boolean\n    secondary?: React.ReactNode\n    shadow?: string\n    sx?: Record<string, unknown>\n    title?: React.ReactNode\n}\n\nconst headerSX = {\n    '& .MuiCardHeader-action': { mr: 0 },\n}\n\nconst MainCard = forwardRef<HTMLDivElement, MainCardProps>(\n    (\n        {\n            border = true,\n            boxShadow,\n            children,\n            content = true,\n            contentClass = '',\n            contentSX = {},\n            darkTitle,\n            secondary,\n            shadow,\n            sx = {},\n            title,\n            ...others\n        }: MainCardProps,\n        ref\n    ) => {\n        const theme = useTheme()\n\n        return (\n            <Card\n                ref={ref}\n                {...others}\n                sx={{\n                    border: border ? '1px solid' : 'none',\n                    borderColor: theme.palette.primary.light + 25,\n                    ':hover': {\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit',\n                    },\n                    ...sx,\n                }}\n            >\n                {/* card header and action */}\n                {title && (\n                    <CardHeader\n                        sx={headerSX}\n                        title={darkTitle ? <Typography variant=\"h3\">{title}</Typography> : title}\n                        action={secondary}\n                    />\n                )}\n\n                {/* content & header divider */}\n                {title && <Divider />}\n\n                {/* card content */}\n                {content && (\n                    <CardContent sx={contentSX} className={contentClass}>\n                        {children}\n                    </CardContent>\n                )}\n                {!content && children}\n            </Card>\n        )\n    }\n)\n\nexport default MainCard\n","import React, { useState } from 'react'\nimport { Avatar, Tooltip, Typography } from '@mui/material'\nimport Paper from '@mui/material/Paper'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TablePagination from '@mui/material/TablePagination'\nimport TableRow from '@mui/material/TableRow'\nimport { IconGitPullRequest, IconSquareCheck, IconSquareX } from '@tabler/icons'\nimport moment from 'moment'\n\nconst SonarCloudTable = ({ data }: { data: PullRequest[] }) => {\n    const [page, setPage] = useState<number>(0)\n    const [rowsPerPage, setRowsPerPage] = useState<number>(10)\n\n    function stringAvatar(name: string) {\n        const words = name.split(' ')\n\n        if (words.length === 1) {\n            return {\n                children: `${name[0]}`,\n            }\n        } else {\n            return {\n                children: `${words[0][0]}${words[1][0]}`,\n            }\n        }\n    }\n    const handleRowClick = (rowData: PullRequest) => {\n        window.open(rowData.url, '_blank')\n    }\n\n    const handleChangePage = (event: any, newPage: number) => {\n        setPage(newPage)\n    }\n\n    const handleChangeRowsPerPage = (event: any) => {\n        setRowsPerPage(parseInt(event.target.value, 10))\n        setPage(0)\n    }\n\n    return (\n        <div>\n            <TableContainer component={Paper}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Pull Request</TableCell>\n                            <TableCell>Status</TableCell>\n                            <TableCell>Author</TableCell>\n                            <TableCell>Checked Date</TableCell>\n                            <TableCell>Commit</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((d: PullRequest) => (\n                            <TableRow key={d.key} onClick={() => handleRowClick(d)} hover style={{ cursor: 'pointer' }}>\n                                <TableCell>\n                                    <Typography\n                                        sx={{\n                                            fontWeight: 500,\n                                            mr: 1,\n                                            mt: 1.75,\n                                            mb: 0.75,\n                                        }}\n                                    >\n                                        <IconGitPullRequest /> {d.key} - {d.title}\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    {d.status.qualityGateStatus === 'OK' ? (\n                                        <IconSquareCheck color=\"#7bc62d\" />\n                                    ) : (\n                                        <IconSquareX color=\"#ff4500\" />\n                                    )}\n                                </TableCell>\n                                <TableCell>\n                                    <Tooltip title={d.commit?.author?.name}>\n                                        <Avatar {...stringAvatar(d.commit?.author?.name)} />\n                                    </Tooltip>\n                                </TableCell>\n                                <TableCell>\n                                    <Tooltip title={moment(d.analysisDate).format('MMMM Do YYYY, h:mm:ss a')}>\n                                        <span>{moment(d.analysisDate).startOf('hour').fromNow()}</span>\n                                    </Tooltip>\n                                </TableCell>\n                                <TableCell>{d.commit.sha.substring(0, 7)}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                component=\"div\"\n                count={data.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </div>\n    )\n}\n\nexport default SonarCloudTable\n","import { useEffect, useState } from 'react'\nimport { Grid } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport MainCard from '../components/Cards/MainCard'\nimport { getPullRequestData } from '../api/get-sonar-cloud-data'\nimport SonarCloudTable from '../components/Tables/SonarCloudTable'\nimport { gridSpacing } from '../redux/constants'\nimport React from 'react'\nimport { projectToValue } from 'utils/name-converter'\n\nconst SonarCloud = ({ title }: { title: string }) => {\n    const [isLoading, setLoading] = useState(true)\n    const [sonarCloudPullRequest, setSonarCloudPullRequest] = useState<SonarCloudData>({ pullRequests: [] })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                setLoading(true)\n                const pullRequest = await getPullRequestData(projectToValue(title))\n                setSonarCloudPullRequest(pullRequest)\n            } catch (error) {\n                console.error('Error fetching data:', error)\n            } finally {\n                setLoading(false)\n            }\n        }\n\n        fetchData()\n    }, [title])\n\n    return (\n        <MainCard title={title} sx={{ boxShadow: theme.shadows[6] }}>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} sm={12} md={12} lg={12}>\n                            {isLoading || !sonarCloudPullRequest || sonarCloudPullRequest.pullRequests.length === 0 ? (\n                                <div>Loading...</div>\n                            ) : (\n                                <SonarCloudTable data={sonarCloudPullRequest.pullRequests} />\n                            )}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MainCard>\n    )\n}\n\nexport default SonarCloud\n","export function projectToValue(value: string): string {\n    switch (value) {\n        case 'List of Pull Request Results for coincover-b2b2c':\n            return 'coincover_coincover-b2b2c'\n        case 'List of Pull Request Results for coincover-txm':\n            return 'coincover_coincover-txm'\n        default:\n            return value\n    }\n}\n"],"names":["axios","create","baseURL","headers","async","getPullRequestData","project","commonAxios","get","concat","data","error","getProjectStatusData","headerSX","mr","forwardRef","_ref","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","_jsxs","Card","borderColor","palette","primary","light","_jsx","CardHeader","Typography","variant","action","Divider","CardContent","className","page","setPage","useState","rowsPerPage","setRowsPerPage","stringAvatar","name","words","split","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","slice","map","d","_d$commit","_d$commit$author","_d$commit2","_d$commit2$author","onClick","handleRowClick","rowData","window","open","url","hover","style","cursor","fontWeight","mt","mb","IconGitPullRequest","key","status","qualityGateStatus","IconSquareCheck","color","IconSquareX","Tooltip","commit","author","Avatar","moment","analysisDate","format","startOf","fromNow","sha","substring","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value","isLoading","setLoading","sonarCloudPullRequest","setSonarCloudPullRequest","pullRequests","useEffect","pullRequest","projectToValue","console","fetchData","MainCard","shadows","Grid","container","spacing","gridSpacing","item","xs","sm","md","lg","SonarCloudTable"],"sourceRoot":""}